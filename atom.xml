<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秋水逍遥</title>
  <subtitle>一蓑烟雨任平生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yyang.io/"/>
  <updated>2016-09-28T03:45:45.000Z</updated>
  <id>http://www.yyang.io/</id>
  
  <author>
    <name>杨宇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>组织结构的领域建模 (0): 写在前面</title>
    <link href="http://www.yyang.io/2016/09/28/Domain-modeling-of-organisation-structure-0-Introduction/"/>
    <id>http://www.yyang.io/2016/09/28/Domain-modeling-of-organisation-structure-0-Introduction/</id>
    <published>2016-09-28T01:44:05.000Z</published>
    <updated>2016-09-28T03:45:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于软件开发来说，领域建模是最重要的活动，领域模型是最重要的产物。领域模型反映了软件所要服务的现实业务领域的本质，体现了我们对业务领域的认识、理解和洞见。</p>
<p>领域模型应该是一切领域开发活动的出发点和依归。</p>
<p>本系列文章以组织结构的领域建模为例，演示领域建模的方法和技巧。</p>
<a id="more"></a>
<h2 id="领域模型的重要性"><a href="#领域模型的重要性" class="headerlink" title="领域模型的重要性"></a>领域模型的重要性</h2><p>领域模型的重要性体现在：</p>
<ol>
<li><p><strong>领域模型的正确性决定了软件在业务上的正确性。</strong></p>
<p>领域模型代表我们对问题域——即软件所要服务的现实业务领域——的组成、结构、行为、机制和规则的认识和理解。模型错误就是对问题域的认识错误，根据错误的模型开发出来的软件（解决方案）必然错漏百出，不符合业务需要。正如同解数学题，如果我们对试题的理解是错误的，我们给出的答案必然是错的。正如同赛跑，如果方向错误了，跑得快是没有什么用的。高超的设计思想和编码技巧都无法弥补领域模型的缺陷。</p>
</li>
<li><p><strong>领域模型的抽象性决定了软件在未来业务上的扩展性。</strong></p>
<p>我们知道在问题域中，既存在共性，也存在个性。好的领域模型通过抽象和分解等等方式，既实现了共性，也使个性化成为可能。不好的领域模型，或者无法进行个性化扩展，或者扩展的成本很高，需要对系统进行伤筋动骨的改动。</p>
<p>好的领域模型既满足当前客户的需要，也支持相同领域其他客户的需要；既符合当前业务需要，也支持未来业务扩展的需要。无论是在空间还是时间上的扩展，都可以低成本实现，与此同时，系统现有部分的正确性和可靠性丝毫不受影响。</p>
</li>
<li><p><strong>领域模型超然于具体的软件实现技术，在软件技术不断更新换代的同时发挥恒久的价值。</strong></p>
<p>软件实现技术是日新月异的，语言、类库、框架会不断升级和更换，但只要业务领域没有变化，我们就不需要更换领域模型。我们需要做的，只不过是以不同的编程语言、不同的类库框架、不同的架构思想，去实现相同的领域模型。“天不变，道亦不变。”问题域是<em>“天”</em>，领域模型就是这个<em>“道”</em>，只要问题域这个<em>“天”</em>不变，领域模型这个<em>“道”</em>也不需要变，只有软件技术这样的<em>“术”</em>才需要频繁变更。</p>
<p>​<br>本系列博文以<strong>组织结构</strong>为例，体现领域模型的进化过程。我们先从一个简单的模型开始，通过对问题域的深入分析，逐步洞悉业务领域的本质，推动领域模型的进化，最终达成一个简单的、通用的模型，既体现了组织结构领域的共性，又允许进行个性化的扩展，同时扩展的成本非常低。</p>
</li>
</ol>
<p>本文从Martin Fowler的《分析模式》一书中得益甚多。Party和Accountability等概念直接来自《分析模式》一书。但我的抽象过程和最终抽象与该书还是有所不同，请读者自行鉴别。</p>
<h2 id="组织结构问题域说明"><a href="#组织结构问题域说明" class="headerlink" title="组织结构问题域说明"></a>组织结构问题域说明</h2><p>每个组织——党政机关、企业、事业单位等等——内部都存在组织结构。对于党政机关，有国家、省、市、县、镇、乡、村、部、厅、局、处、科、股；对于公司，有总公司、分公司、子公司、事业部、部门、科室；对于高校，有大学、学院、系、专业，等等等等。机构之间形成树形的层级关系，有的组织中还存在多个维度的组织层级，例如市公安局行政上级是市政府，业务上级是省公安厅。员工由某个组织雇佣，在某个机构担任一个职位，有的员工还会在多个机构担任不同的职位。除了上述各种实体和关系之外，还有职系、职级、职等等等各种概念……</p>
<p>读到这里，是不是脑子里充满了混乱和疑问？这是每个人面对新领域时候的正常反应——天才除外。下面的系列文章，将从混沌中寻找秩序，最终建构一个易于理解、易于扩展的相对完善的领域模型，各种概念各归其位，形成一个有机的整体。</p>
<h2 id="关注领域建模，而不是领域模型"><a href="#关注领域建模，而不是领域模型" class="headerlink" title="关注领域建模，而不是领域模型"></a>关注领域建模，而不是领域模型</h2><p>再次说明，下面的系列文章，不是从一开始就建构一个完美的模型，而是从简单开始建立一系列模型，不断建立，又不断舍弃，形成新的模型，逐步趋于至善。这个就是真实世界中的真实的领域建模过程。</p>
<p>重要的不是领域模型这个最终产物，而是领域建模这个寻寻觅觅的过程，是<em>“求道”</em>过程中的思考洞察和权衡取舍。</p>
<p>金源诗人元好问《论诗三十首》中有这样的句子：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">​鸳鸯绣了从教看，莫把金针度与人。</div></pre></td></tr></table></figure>
<p>绣得栩栩如生的鸳鸯图不重要，刺绣的针法才重要。不要黄金，要点石成金的那根手指。</p>
<p>所以：</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">​别关注领域模型（Domain <span class="keyword">Model</span>），关注领域建模（Domain Modeling）。</div></pre></td></tr></table></figure>
<p>掌握了领域建模的技巧，你可以在不同的领域创建无数优秀的领域模型。领域建模的技巧，就是绣鸳鸯的针法，就是点石成金的那根手指。</p>
<p>领域建模的技能是一种可以习得技能，要掌握它，需要的是勇气，而不是天赋。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于软件开发来说，领域建模是最重要的活动，领域模型是最重要的产物。领域模型反映了软件所要服务的现实业务领域的本质，体现了我们对业务领域的认识、理解和洞见。&lt;/p&gt;
&lt;p&gt;领域模型应该是一切领域开发活动的出发点和依归。&lt;/p&gt;
&lt;p&gt;本系列文章以组织结构的领域建模为例，演示领域建模的方法和技巧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="OOAD" scheme="http://www.yyang.io/tags/OOAD/"/>
    
      <category term="领域建模" scheme="http://www.yyang.io/tags/%E9%A2%86%E5%9F%9F%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="组织结构" scheme="http://www.yyang.io/tags/%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>要政治正确，还是要科学客观</title>
    <link href="http://www.yyang.io/2016/09/17/Political-correctness-should-be-abandoned/"/>
    <id>http://www.yyang.io/2016/09/17/Political-correctness-should-be-abandoned/</id>
    <published>2016-09-17T15:04:31.000Z</published>
    <updated>2016-09-27T09:27:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>科学无禁区。重要的是客观、真实，而不是“政治正确”。</p>
<a id="more"></a>
<p>近日中国国航旗下的国航的舱内杂志《中国之翼》的一则伦敦旅行安全提示用中英文这样写道：“到伦敦旅行很安全，但有些印巴聚集区和黑人聚集区相对较乱。夜晚最好不要单独出行，女士应该尽量结伴而行。”</p>
<p>这段文字被控涉嫌种族歧视，引起了天然大波。国航受到广泛的抨击，最后以道歉、收回该杂志文章告终。</p>
<p>此前这类事件也发生过多起，例如：</p>
<p>哈佛大学校长萨默斯研究发现男女在智商方面存在差异，被攻击性别歧视。次年萨默斯辞去校长职务，被一位女性接任。</p>
<p>DNA双螺旋结构的共同发现者James Dewey Watson，2007年发表言论称非洲人种在先天智能上低于白人，引起强烈抗议，其事业也因此每况愈下。沃森最终被迫离开纽约长岛的冷泉港实验室。</p>
<p>在美国，黑人的犯罪率明显高于白人，但是任何报刊都不敢明目张胆地报道这一事实。甚至于警察对黑人盘查稍微严密一些，都可能引发大规模的抗议示威。</p>
<p>在全世界，恐怖分子多数是伊斯兰教徒而不是基督教徒和佛教徒。这个事实也不允许说出口，虽然人人心里都明白这一点。</p>
<p>这就是所谓“政治正确”，任何科学上的、统计上的证据，都不可以违反政治正确的原则，即使是事实，即使尽人皆知，也不允许宣之于口，更不允许形诸文字。</p>
<p>我认为“科学无禁区”。男人和女人可以有生理上的差异，为什么就不可以有智力上的差异？白人和黑人可以肤色不同，为什么就不可以有行为上的不同？不同的宗教遵循不同的教义，有的主张和平，有的主张圣战，为什么不能明确指出某些宗教更具有攻击性？</p>
<p>回到上面的国航事件。我认为其杂志文章一点问题都没有。游客和居民的亲身体验和统计学数据都可以充分表明：印巴聚集区和黑人聚集区确实比其他地区更不安全，治安案件更为多发。将这个事实告知旅客，可以减少旅客的风险，保护他们的生命财产安全，这正是航空公司的责任所在。难道我们应该隐瞒这个事实，以方便犯罪分子抢掠杀害旅客？</p>
<p>真永远比善重要，善永远比美重要。即使求真求实会导致血雨腥风、山崩地裂，也要坚持真理，不向现实政治低头。没有“真”支撑的所谓“善”都是伪善。</p>
<p>英国法官丹宁勋爵说：</p>
<blockquote>
<p>“宪法不允许以国家利益影响我们的判决：上帝不让这样做！我们决不考虑政治后果；无论它们可能有多麽可怕：如果某种后果是叛乱，那麽我们不得不说：实现公正，即使天塌下来。” </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;科学无禁区。重要的是客观、真实，而不是“政治正确”。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>谁的钓鱼岛？</title>
    <link href="http://www.yyang.io/2016/09/03/Whose-fishing-island/"/>
    <id>http://www.yyang.io/2016/09/03/Whose-fishing-island/</id>
    <published>2016-09-03T02:42:16.000Z</published>
    <updated>2016-09-27T09:27:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>钓鱼岛是谁的？</p>
<p>大部分中国人认为是中国的，大部分日本人认为是日本的。</p>
<p>小部分中国人寻找支持钓鱼岛属于中国的证据，然后相信钓鱼岛是中国的。小部分日本人寻找支持钓鱼岛属于日本的证据，然后相信钓鱼岛是日本的。</p>
<p>也有极小一部分的中国人和日本人，会同时搜集两方面的证据，但是对支持己方的证据不加辨别，深表认同，对支持对方的证据不加辨别，直斥为胡说八道。</p>
<p>我期望还有这样一群人，他们没有任何预设立场，在没有看过双方的证据之前不作任何钓鱼岛归属方面的判断；如果想要做出判断，就公平地搜集双方的证据，然后用客观、公正的心态去分析证据，根据客观事实而不是利益得失去判断钓鱼岛的归属。不要因为你是中国人，就倾向于认为钓鱼岛属于中国；也不要因为你是日本人，就倾向于认为钓鱼岛属于日本。</p>
<p>如果没有这样的人，这个世界奉行的仍然是丛林法则，有暴力无公义。</p>
<p>如果奉行丛林法则，我们就不要怨恨当年日本人对我们的亡国灭种；如果相信公义，就不要在国家强大之后整天叫嚣要核平我们弱小的邻居。</p>
<p>相比之下，在日本曾有教授著书，认为钓鱼岛属于中国，在日本公开出版，而此人仍然能够自由生活在日本。想象一下如果一个中国人出书表明钓鱼岛属于日本，此人必将成为中国政府和人民的共同敌人，不是坐牢就是被殴死。</p>
<p>在中道、理性、客观、平和之人成为世界主流之前，人类社会将始终处于战争和灭绝的阴影之下。</p>
<p>微斯人，吾谁与归？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;钓鱼岛是谁的？&lt;/p&gt;
&lt;p&gt;大部分中国人认为是中国的，大部分日本人认为是日本的。&lt;/p&gt;
&lt;p&gt;小部分中国人寻找支持钓鱼岛属于中国的证据，然后相信钓鱼岛是中国的。小部分日本人寻找支持钓鱼岛属于日本的证据，然后相信钓鱼岛是日本的。&lt;/p&gt;
&lt;p&gt;也有极小一部分的中国人和日本
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>成员、乘客与任职——对关系建模</title>
    <link href="http://www.yyang.io/2016/07/26/member-passenger-assignment-modeling-relationships/"/>
    <id>http://www.yyang.io/2016/07/26/member-passenger-assignment-modeling-relationships/</id>
    <published>2016-07-26T06:49:48.000Z</published>
    <updated>2016-07-26T07:17:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>在领域建模的时候，直接对两个实体间的关系进行显式建模，往往会得到更好的结果。</p>
<p>下面，我们通过三个例子详细说明这一点。</p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="实例1：航班客运"><a href="#实例1：航班客运" class="headerlink" title="实例1：航班客运"></a>实例1：航班客运</h2><h2 id="实例2：项目管理"><a href="#实例2：项目管理" class="headerlink" title="实例2：项目管理"></a>实例2：项目管理</h2><h2 id="实例3：人力资源管理"><a href="#实例3：人力资源管理" class="headerlink" title="实例3：人力资源管理"></a>实例3：人力资源管理</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在领域建模的时候，直接对两个实体间的关系进行显式建模，往往会得到更好的结果。&lt;/p&gt;
&lt;p&gt;下面，我们通过三个例子详细说明这一点。&lt;/p&gt;
&lt;h1 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h1&gt;
    
    </summary>
    
    
      <category term="-OOAD" scheme="http://www.yyang.io/tags/OOAD/"/>
    
  </entry>
  
  <entry>
    <title>OOAD范例：配置类设计</title>
    <link href="http://www.yyang.io/2016/06/30/design-a-configuration-class/"/>
    <id>http://www.yyang.io/2016/06/30/design-a-configuration-class/</id>
    <published>2016-06-30T02:56:26.000Z</published>
    <updated>2016-07-05T05:04:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>在很多应用程序中，我们都需要一个配置类Configuration，通常从一个文本文件中读入配置信息，根据配置调整应用的行为。通过这样的方式，我们可以用相同的代码来适应不同的环境，达到<strong>灵活性</strong>的目标。</p>
<p>本文探索如何设计好这样的配置类。我们的重点不在于设计的产物——配置类——本身，而是在设计中的权衡取舍，以及取舍的原则。</p>
<a id="more"></a>
<p>这里我们以从一个conf.properties文件中读取配置信息为例，以不同的方式读取配置信息。</p>
<p>这个文件的内容如下：</p>
<figure class="highlight ini"><figcaption><span>conf.properties</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">birthday</span>=<span class="number">2002</span>-<span class="number">05</span>-<span class="number">11</span></div><div class="line"><span class="attr">size</span>=<span class="number">15</span></div><div class="line"><span class="attr">closed</span>=<span class="literal">true</span></div><div class="line"><span class="attr">locked</span> = <span class="literal">false</span></div><div class="line"><span class="attr">salary</span>=<span class="number">12.5</span></div><div class="line"><span class="attr">name</span>=张三</div><div class="line"><span class="attr">noneValue</span>=</div></pre></td></tr></table></figure>
<p>配置文件是一个标准的属性文件，在一个配置文件中有一系列的配置项，每个配置项的形式是<em>key=value</em>，其中key为配置项的名称，value为配置项的值。配置项有字符串、数值、布尔、日期等多种类型。</p>
<p>为了方便,本文直接使用单元测试作为配置类的客户代码,即配置类的消费者。</p>
<p>如何在应用代码中获取配置信息？以下提供三种方法，我们随后将分析各自的优缺点。</p>
<h2 id="通过JDK自带的Properties类读取配置"><a href="#通过JDK自带的Properties类读取配置" class="headerlink" title="通过JDK自带的Properties类读取配置"></a>通过JDK自带的Properties类读取配置</h2><p>JDK中，已经提供了一个Properties类，可以用于从属性文件中读取配置信息。</p>
<p>客户代码如下：</p>
<figure class="highlight java"><figcaption><span>PropertiesTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> yang.yu.configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.assertj.core.api.Assertions.assertThat;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String confFile = <span class="string">"/conf.properties"</span>;</div><div class="line">    <span class="keyword">private</span> Properties properties;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        properties = <span class="keyword">new</span> Properties();</div><div class="line">        <span class="keyword">try</span>(InputStream in = getClass().getResourceAsStream(confFile)) &#123;</div><div class="line">            properties.load(in);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetString</span><span class="params">()</span> </span>&#123;</div><div class="line">        String name = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String temp = properties.getProperty(<span class="string">"name"</span>);</div><div class="line">            name = <span class="keyword">new</span> String(temp.getBytes(<span class="string">"iso-8859-1"</span>), <span class="string">"utf-8"</span>);</div><div class="line">            System.out.println(name);</div><div class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        assertThat(name).isEqualTo(<span class="string">"张三"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetStringWithDefault</span><span class="params">()</span> </span>&#123;</div><div class="line">        String defaultValue = <span class="string">"abc"</span>;</div><div class="line">        String temp = properties.getProperty(<span class="string">"notExists"</span>);</div><div class="line">        String name = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (temp == <span class="keyword">null</span>) &#123;</div><div class="line">            name = defaultValue;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                name = <span class="keyword">new</span> String(temp.getBytes(<span class="string">"iso-8859-1"</span>), <span class="string">"utf-8"</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        assertThat(name).isEqualTo(<span class="string">"abc"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetInt</span><span class="params">()</span> </span>&#123;</div><div class="line">        String temp = properties.getProperty(<span class="string">"size"</span>);</div><div class="line">        <span class="keyword">if</span> (temp == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationKeyNotFoundException();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> value = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            value = Integer.parseInt(temp);</div><div class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot parse string '"</span> + temp + <span class="string">"' to int"</span>);</div><div class="line">        &#125;</div><div class="line">        assertThat(value).isEqualTo(<span class="number">15</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetIntWithDefault</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> defaultValue = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> value = -<span class="number">1</span>;</div><div class="line">        String temp = properties.getProperty(<span class="string">"size"</span>);</div><div class="line">        <span class="keyword">if</span> (temp == <span class="keyword">null</span>) &#123;</div><div class="line">            value = defaultValue;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            value = Integer.parseInt(temp);</div><div class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot parse string '"</span> + temp + <span class="string">"' to int"</span>);</div><div class="line">        &#125;</div><div class="line">        assertThat(value).isEqualTo(<span class="number">15</span>);</div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里，我们用单元测试作为配置的客户代码。我们通过Properties类从类路径下的conf.properties文件中读取配置信息，然后通过Properties类的getProperty()方法获取相应的配置项。</p>
<p>虽然从功能上来说，通过Properties类访问配置项没有任何问题，但是客户代码却非常复杂，下面一一讨论。</p>
<p><strong>1. 繁琐</strong></p>
<p>为了获取一个配置值，必须像下面这样输入很多行代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetIntWithDefault</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> defaultValue = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> value = -<span class="number">1</span>;</div><div class="line">    String temp = properties.getProperty(<span class="string">"size"</span>);</div><div class="line">    <span class="keyword">if</span> (temp == <span class="keyword">null</span>) &#123;</div><div class="line">        value = defaultValue;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        value = Integer.parseInt(temp);</div><div class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Cannot parse string '"</span> + temp + <span class="string">"' to int"</span>);</div><div class="line">    &#125;</div><div class="line">    assertThat(value).isEqualTo(<span class="number">15</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为我们在获取配置值时，必须进行下面的工作：</p>
<ul>
<li>检索key是否存在</li>
<li>检索value是否存在</li>
<li>如果配置项是字符串类型，必须进行字符集转换</li>
<li>如果配置项不是字符串类型，必须进行类型转换</li>
<li>如果需要类型转换，必须处理转换异常</li>
<li>必须分别处理有缺省值和无缺省值两种情况</li>
<li>当有缺省值，但转换失败时，是返回缺省值，还是抛出解析异常？必须灵活应对这两种情况。</li>
</ul>
<p><strong>2. 重复</strong></p>
<p>由于没有封装，每次访问属性值时都必须输入类似上面的一大段代码，而不只是一行方法调用。因此，系统中充满着重复的代码。业界已经公认，重复是万恶之源。</p>
<p><strong>3. 僵化</strong></p>
<p>我们不能灵活应对多种情况，例如是否有缺省值，日期格式是什么，解析失败时是返回缺省值，还是抛出解析异常等等决策，都直接硬编码到代码之中，不能根据现实需要灵活调整。</p>
<p><strong>4. 脆弱</strong></p>
<p>由于代码复杂，多个关注点相互缠绕，系统非常脆弱，时刻可能因为考虑不周而产生逻辑错误。</p>
<p>直接使用Properties，我们得到的是一个可读性差、可维护性差、复杂、僵化而脆弱的系统。</p>
<h2 id="设计一个通用的Configuration类"><a href="#设计一个通用的Configuration类" class="headerlink" title="设计一个通用的Configuration类"></a>设计一个通用的Configuration类</h2><p>针对直接采用Properties做配置类的问题，<strong>封装</strong>是一个非常有效的解决办法。我们可以设计一个通用的Configuration类，在该类中封装了异常处理、字符集编码转换、类型转换、缺省值处理等等方面，使得客户代码可以非常简单、直接，系统的可读性、可维护性和可靠性都得到大幅提升。</p>
<p>配置类的代码如下：</p>
<figure class="highlight java"><figcaption><span>Configuration.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> yang.yu.configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> yang.yu.configuration.internal.PropertiesFileUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.text.ParseException;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.Hashtable;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Configuration.class);</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_DATE_FORMAT = <span class="string">"yyyy-MM-dd"</span>;</div><div class="line">	<span class="keyword">private</span> Hashtable&lt;String, String&gt; hashtable;</div><div class="line">	<span class="keyword">private</span> String dateFormat = DEFAULT_DATE_FORMAT;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> defaultWhenParseFailed = <span class="keyword">false</span>;	<span class="comment">//当类型转换失败时是否返回缺省值</span></div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Builder();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Configuration</span><span class="params">(Hashtable&lt;String, String&gt; hashtable)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.hashtable = hashtable;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateFormat</span><span class="params">(String dateFormat)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.dateFormat = dateFormat;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDefaultWhenParseFailed</span><span class="params">(<span class="keyword">boolean</span> defaultWhenParseFailed)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.defaultWhenParseFailed = defaultWhenParseFailed;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String key, String defaultValue)</span> </span>&#123;</div><div class="line">		Assert.notBlank(key, <span class="string">"Key is null or empty!"</span>);</div><div class="line">        String value = hashtable.get(key);</div><div class="line">        <span class="keyword">return</span> StringUtils.isBlank(value) ? defaultValue : value;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">		Assert.notBlank(key, <span class="string">"Key is null or empty!"</span>);</div><div class="line">		<span class="keyword">if</span> (!hashtable.containsKey(key)) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationKeyNotFoundException(<span class="string">"Configuration key '"</span> + key + <span class="string">"' not found!"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> hashtable.get(key);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(String key, <span class="keyword">int</span> defaultValue)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!hashtable.containsKey(key)) &#123;</div><div class="line">			<span class="keyword">return</span> defaultValue;</div><div class="line">		&#125;</div><div class="line">		String value = hashtable.get(key);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">return</span> Integer.parseInt(value);</div><div class="line">		&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">			<span class="keyword">if</span> (defaultWhenParseFailed) &#123;</div><div class="line">				<span class="keyword">return</span> defaultValue;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationValueParseException(<span class="string">"'"</span> + value + <span class="string">"' cannot be parsed to int"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!hashtable.containsKey(key)) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationKeyNotFoundException(<span class="string">"Configuration key '"</span> + key + <span class="string">"' not found!"</span>);</div><div class="line">		&#125;</div><div class="line">		String value = hashtable.get(key);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">return</span> Integer.parseInt(value);</div><div class="line">		&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationValueParseException(<span class="string">"'"</span> + value + <span class="string">"' cannot be parsed to int"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLong</span><span class="params">(String key, <span class="keyword">long</span> defaultValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!hashtable.containsKey(key)) &#123;</div><div class="line">            <span class="keyword">return</span> defaultValue;</div><div class="line">        &#125;</div><div class="line">        String value = hashtable.get(key);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> Long.parseLong(value);</div><div class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">            <span class="keyword">if</span> (defaultWhenParseFailed) &#123;</div><div class="line">                <span class="keyword">return</span> defaultValue;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationValueParseException(<span class="string">"'"</span> + value + <span class="string">"' cannot be parsed to long"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLong</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!hashtable.containsKey(key)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationKeyNotFoundException(<span class="string">"Configuration key '"</span> + key + <span class="string">"' not found!"</span>);</div><div class="line">        &#125;</div><div class="line">        String value = hashtable.get(key);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> Long.parseLong(value);</div><div class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationValueParseException(<span class="string">"'"</span> + value + <span class="string">"' cannot be parsed to long"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getDouble</span><span class="params">(String key, <span class="keyword">double</span> defaultValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!hashtable.containsKey(key)) &#123;</div><div class="line">            <span class="keyword">return</span> defaultValue;</div><div class="line">        &#125;</div><div class="line">        String value = hashtable.get(key);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> Double.parseDouble(value);</div><div class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">            <span class="keyword">if</span> (defaultWhenParseFailed) &#123;</div><div class="line">                <span class="keyword">return</span> defaultValue;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationValueParseException(<span class="string">"'"</span> + value + <span class="string">"' cannot be parsed to double"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getDouble</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!hashtable.containsKey(key)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationKeyNotFoundException(<span class="string">"Configuration key '"</span> + key + <span class="string">"' not found!"</span>);</div><div class="line">        &#125;</div><div class="line">        String value = hashtable.get(key);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> Double.parseDouble(value);</div><div class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationValueParseException(<span class="string">"'"</span> + value + <span class="string">"' cannot be parsed to double"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(String key, <span class="keyword">boolean</span> defaultValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!hashtable.containsKey(key)) &#123;</div><div class="line">            <span class="keyword">return</span> defaultValue;</div><div class="line">        &#125;</div><div class="line">        String value = hashtable.get(key);</div><div class="line">        <span class="keyword">if</span> (<span class="string">"true"</span>.equalsIgnoreCase(value)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="string">"false"</span>.equalsIgnoreCase(value)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (defaultWhenParseFailed) &#123;</div><div class="line">            <span class="keyword">return</span> Boolean.parseBoolean(value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationValueParseException(<span class="string">"'"</span> + value + <span class="string">"' cannot be parsed to boolean"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!hashtable.containsKey(key)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationKeyNotFoundException(<span class="string">"Configuration key '"</span> + key + <span class="string">"' not found!"</span>);</div><div class="line">        &#125;</div><div class="line">        String value = hashtable.get(key);</div><div class="line">        <span class="keyword">if</span> (<span class="string">"true"</span>.equalsIgnoreCase(value)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="string">"false"</span>.equalsIgnoreCase(value)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationValueParseException(<span class="string">"'"</span> + value + <span class="string">"' cannot be parsed to boolean"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">(String key, Date defaultValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!hashtable.containsKey(key)) &#123;</div><div class="line">            <span class="keyword">return</span> defaultValue;</div><div class="line">        &#125;</div><div class="line">        String value = hashtable.get(key);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(dateFormat).parse(value);</div><div class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">            <span class="keyword">if</span> (defaultWhenParseFailed) &#123;</div><div class="line">                <span class="keyword">return</span> defaultValue;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationValueParseException(<span class="string">"'"</span> + value + <span class="string">"' cannot be parsed to date"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!hashtable.containsKey(key)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationKeyNotFoundException(<span class="string">"Configuration key '"</span> + key + <span class="string">"' not found!"</span>);</div><div class="line">        &#125;</div><div class="line">        String value = hashtable.get(key);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(dateFormat).parse(value);</div><div class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationValueParseException(<span class="string">"'"</span> + value + <span class="string">"' cannot be parsed to date"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">boolean</span> defaultWhenParseFailed = <span class="keyword">false</span>;	<span class="comment">//当类型转换失败时是否返回缺省值</span></div><div class="line">		<span class="keyword">private</span> Hashtable&lt;String, String&gt; hashtable = <span class="keyword">new</span> Hashtable();</div><div class="line">		<span class="keyword">private</span> String dateFormat = <span class="string">"yyyy-MM-dd"</span>;</div><div class="line">		<span class="keyword">private</span> PropertiesFileUtils pfu = <span class="keyword">new</span> PropertiesFileUtils(<span class="string">"utf-8"</span>);</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">fromClasspath</span><span class="params">(String confFile)</span> </span>&#123;</div><div class="line">			String path = getClass().getResource(confFile).getFile();</div><div class="line">			<span class="keyword">return</span> fromFile(path);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">fromFile</span><span class="params">(String confFile)</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> fromFile(<span class="keyword">new</span> File(confFile));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">fromFile</span><span class="params">(File confFile)</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (!confFile.exists()) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationFileNotFoundException();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (!confFile.canRead()) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationFileReadException(<span class="string">"Read configuration file is not permitted!"</span>);</div><div class="line">			&#125;</div><div class="line">			InputStream in = <span class="keyword">null</span>;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				in = <span class="keyword">new</span> FileInputStream(confFile);</div><div class="line">				Properties props = <span class="keyword">new</span> Properties();</div><div class="line">				props.load(in);</div><div class="line">				hashtable = pfu.rectifyProperties(props);</div><div class="line">				LOGGER.debug(<span class="string">"Load configuration from &#123;&#125; at &#123;&#125;"</span>, confFile.getAbsolutePath(), <span class="keyword">new</span> Date());</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationFileReadException(<span class="string">"Cannot load config file: "</span> + confFile, e);</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				<span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						in.close();</div><div class="line">					&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationException(<span class="string">"Cannot close input stream."</span>, e);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">dateFormat</span><span class="params">(String dateFormat)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.dateFormat = dateFormat;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">defaultWhenParseFailed</span><span class="params">(<span class="keyword">boolean</span> defaultWhenParseFailed)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.defaultWhenParseFailed = defaultWhenParseFailed;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> Configuration <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (hashtable.isEmpty()) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ConfigurationException(<span class="string">"Configuration source not specified!"</span>);</div><div class="line">			&#125;</div><div class="line">			Configuration result = <span class="keyword">new</span> Configuration(hashtable);</div><div class="line">			result.setDateFormat(dateFormat);</div><div class="line">			result.setDefaultWhenParseFailed(defaultWhenParseFailed);</div><div class="line">			<span class="keyword">return</span> result;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过将异常处理、类型转换、字符编码转换等等功能集中在Configuration类中统一处理，客户端代码卸下这些繁重的、重复性的、易于出错的负担，变得非常简单明了：</p>
<figure class="highlight java"><figcaption><span>ConfigurationTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> yang.yu.configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.util.Calendar;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.assertj.core.api.Assertions.assertThat;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.assertj.core.api.Assertions.offset;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String confFile = <span class="string">"/conf.properties"</span>;</div><div class="line">    <span class="keyword">private</span> Configuration instance;</div><div class="line">    </div><div class="line">    <span class="comment">//more</span></div><div class="line">    <span class="comment">///////////////////////////////////////////3. Int型配置项</span></div><div class="line"></div><div class="line">    <span class="comment">//////////////////3.1. Int型配置项,无缺省值</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * key存在,value存在,格式正确,应当返回value</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_int_without_defaultValue_happy</span><span class="params">()</span> </span>&#123;</div><div class="line">        assertThat(instance.getInt(<span class="string">"size"</span>)).isEqualTo(<span class="number">15</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * key存在,value存在,格式不正确,应当抛出ConfigurationValueParseException异常</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span>(expected = ConfigurationValueParseException.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_int_without_defaultValue_and_with_invalid_value</span><span class="params">()</span> </span>&#123;</div><div class="line">        instance.getInt(<span class="string">"name"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * key存在,value不存在,应当抛出ConfigurationValueParseException异常</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span>(expected = ConfigurationValueParseException.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_int_without_defaultValue_and_without_value</span><span class="params">()</span> </span>&#123;</div><div class="line">        instance.getInt(<span class="string">"noneValue"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * key不存在,应当抛出ConfigurationKeyNotFoundException异常</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span>(expected = ConfigurationKeyNotFoundException.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_int_without_defaultValue_and_without_key</span><span class="params">()</span> </span>&#123;</div><div class="line">        instance.getInt(<span class="string">"noneKey"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/////////////3.2. Int型配置项,有缺省值</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * key存在, value存在,格式正确,应当返回value</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_int_with_defaultValue_and_with_value</span><span class="params">()</span> </span>&#123;</div><div class="line">        assertThat(instance.getInt(<span class="string">"size"</span>, <span class="number">1000</span>)).isEqualTo(<span class="number">15</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * key存在,value存在,格式不正确,defaultWhenParseFailed=true,应当返回缺省值</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_int_with_defaultValue_and_with_invalid_value_and_defaultWhenParseFailed_is_true</span><span class="params">()</span> </span>&#123;</div><div class="line">        instance.setDefaultWhenParseFailed(<span class="keyword">true</span>);</div><div class="line">        assertThat(instance.getInt(<span class="string">"name"</span>, <span class="number">1000</span>)).isEqualTo(<span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * key存在,value存在,格式不正确,defaultWhenParseFailed=false,应当抛出ConfigurationValueParseException异常</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span>(expected = ConfigurationValueParseException.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_int_with_defaultValue_and_with_invalid_value_and_defaultWhenParseFailed_is_false</span><span class="params">()</span> </span>&#123;</div><div class="line">        instance.setDefaultWhenParseFailed(<span class="keyword">false</span>);</div><div class="line">        instance.getInt(<span class="string">"name"</span>, <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * key存在,value不存在,defaultWhenParseFailed=true,应当返回缺省值</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_int_with_defaultValue_and_without_value_and_defaultWhenParseFailed_is_true</span><span class="params">()</span> </span>&#123;</div><div class="line">        instance.setDefaultWhenParseFailed(<span class="keyword">true</span>);</div><div class="line">        assertThat(instance.getInt(<span class="string">"noneValue"</span>, <span class="number">1000</span>)).isEqualTo(<span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * key存在,value不存在,defaultWhenParseFailed=false,应当抛出ConfigurationValueParseException异常</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span>(expected = ConfigurationValueParseException.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_int_with_defaultValue_and_without_value_and_defaultWhenParseFailed_is_false</span><span class="params">()</span> </span>&#123;</div><div class="line">        instance.setDefaultWhenParseFailed(<span class="keyword">false</span>);</div><div class="line">        instance.getInt(<span class="string">"noneValue"</span>, <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * key不存在,应当返回缺省值</div><div class="line">     */</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_int_with_defaultValue_and_without_key</span><span class="params">()</span> </span>&#123;</div><div class="line">        assertThat(instance.getInt(<span class="string">"noneKey"</span>, <span class="number">1000</span>)).isEqualTo(<span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">	<span class="comment">//more    </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要获取一个整数值，我们只需要这样调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> size = configuration.getInt(<span class="string">"size"</span>);</div></pre></td></tr></table></figure>
<p>如果想要在配置项不存在时返回缺省值，我们只需要这样调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> size = configuration.getInt(<span class="string">"size"</span>， <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>读取配置信息是一个通用性的需求，几乎在每个项目中都有这样的需要。抽象出Configuration类之后，我们可以将它作为公司级通用类库，供给所有的项目引用，使得其他项目不再需要编写重复的配置文件读取代码。</p>
<p>但是，直接使用通用的Configuration类，仍有不尽人意的方面。例如，我要读取Boolean类型的closed配置项，必须这样编写代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (configuration.getBoolean(<span class="string">"closed"</span>)) &#123;</div><div class="line">	......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样的语句仍然与我的领域语言隔了一层，是面向实现而不是面向意图的。我真正需要的是这样的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (configuration.isClosed()) &#123;</div><div class="line">	......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>closed</em>不再是一个由5个字母组成的字符串，而是领域语言isClosed()的一部分。</p>
<p>下面说明怎样设计这样的一个面向客户领域的、特化的Configuration类。</p>
<h2 id="设计一个特化的AppConfiguration类"><a href="#设计一个特化的AppConfiguration类" class="headerlink" title="设计一个特化的AppConfiguration类"></a>设计一个特化的AppConfiguration类</h2><p>特化的AppConfiguration类采用客户领域的语言编写，将配置项中无意义的字符串key转化为方法名称：</p>
<figure class="highlight java"><figcaption><span>AppConfiguration.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> yang.yu.configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String confFile = <span class="string">"/conf.properties"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_BIRTHDAY = <span class="string">"birthday"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_SIZE = <span class="string">"size"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_CLOSED = <span class="string">"closed"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_LOCKED = <span class="string">"locked"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_SALARY = <span class="string">"salary"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_NAME = <span class="string">"name"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> HIGH_SALARY_THRESHOLD = <span class="number">10000</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Configuration configuration;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppConfiguration</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.configuration = Configuration.builder()</div><div class="line">                .fromClasspath(confFile)</div><div class="line">                .dateFormat(<span class="string">"yyyy-MM-dd"</span>)</div><div class="line">                .defaultWhenParseFailed(<span class="keyword">true</span>)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppConfiguration</span><span class="params">(Configuration configuration)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.configuration = configuration;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">birthday</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> configuration.getDate(KEY_BIRTHDAY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> configuration.getInt(KEY_SIZE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isClosed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> configuration.getBoolean(KEY_CLOSED);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> configuration.getBoolean(KEY_LOCKED);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">salary</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> configuration.getDouble(KEY_SALARY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHighSalaryLevel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> salary() &gt;= HIGH_SALARY_THRESHOLD;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> configuration.getString(<span class="string">"name"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>客户端代码更加简单、直接，可读性更强：</p>
<figure class="highlight java"><figcaption><span>AppConfigurationTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> yang.yu.configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Calendar;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.assertj.core.api.Assertions.assertThat;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.assertj.core.api.Assertions.offset;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfigurationTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> AppConfiguration instance;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        instance = <span class="keyword">new</span> AppConfiguration();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">birthday</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Date expected = DateUtils.createDate(<span class="number">2002</span>, Calendar.MAY, <span class="number">11</span>);</div><div class="line">        assertThat(instance.birthday()).isEqualTo(expected);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        assertThat(instance.size()).isEqualTo(<span class="number">15</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isClosed</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        assertThat(instance.isClosed()).isTrue();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isLocked</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        assertThat(instance.isLocked()).isFalse();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">salary</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        assertThat(instance.salary()).isCloseTo(<span class="number">12.5</span>, offset(<span class="number">0.00001</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isHighSalaryLevel</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        assertThat(instance.isHighSalaryLevel()).isFalse();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        assertThat(instance.name()).isEqualTo(<span class="string">"张三"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>提供应用特定的配置类好处很明显：</p>
<p><strong>1. 通过将配置项从字符串转换成方法名，减少了错误录入的可能</strong></p>
<p>如果我们这些读取配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> closed = configuration.getBoolean(<span class="string">"closed"</span>);</div></pre></td></tr></table></figure>
<p>如果不小心，很容易把字符串<em>closed</em>写错。要命的是，这个错误IDE和编译器都无法捕获，只有在运行时才会发现。</p>
<p>这样的配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> closed = configuration.isClosed();</div></pre></td></tr></table></figure>
<p>就不太可能写错，即使写错了，IDE和编译器会替你发现。</p>
<p><strong>2. 面向领域编程</strong></p>
<p>在分析设计的时候，我们应该通过在软件中采用问题域的词汇来作为软件类、方法、属性、变量的名称来缩小问题域和解决方案域之间的语义距离。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">configuration.isClosed();</div></pre></td></tr></table></figure>
<p>比起</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">configuration.getBoolean(<span class="string">"closed"</span>);</div></pre></td></tr></table></figure>
<p>更接近问题域的语言。</p>
<p><strong>3. 支持衍生配置项</strong></p>
<p>在AppConfiguration类中，我创建了一个衍生配置项：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHighSalaryLevel</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> salary() &gt;= HIGH_SALARY_THRESHOLD;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该配置项并不直接存储于conf.properties中。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这个项目中主要应用了两个设计技巧:</p>
<ul>
<li>封装</li>
<li>泛化与特化</li>
</ul>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>在这个项目中,我们在两个地方基于不同的目的应用了封装。</p>
<ol>
<li>通过Configuration封装Properties, 目的是隐藏技术复杂性，减轻客户端代码的负担。</li>
<li>通过AppConfiguration封装Configuration，目的是更契合特定领域的需要，面向意图编程。</li>
</ol>
<h3 id="泛化（generalization）与特化（specialization）"><a href="#泛化（generalization）与特化（specialization）" class="headerlink" title="泛化（generalization）与特化（specialization）"></a>泛化（generalization）与特化（specialization）</h3><p>在本项目中,我们同时提供了通用的配置类Configuration和专门领域的配置类AppConfiguration。Configuration是AppConfiguration的泛化，AppConfiguration是Configuration的特化。</p>
<p>Configuration的目标是重用，因此必须更一般化，可以提供任意多个设置项，提供更多的可配置内容（例如<em>dateFormat</em>, <em>defaultWhenParseFailed</em>等），以便可以灵活应用于多种不同的环境；AppConfiguration的目标是紧密契合当前项目的需要，因此有一个固定的设置项集合，并且剔除了不必要的灵活性（<em>dateFormat</em>直接设置为<em>yyyy-MM-dd</em>，<em>defaultWhenParseFailed</em>直接设置为<em>true</em>）。</p>
<p>最重要的是记住：</p>
<pre><code>泛化以扩大外延——在大多数项目中得到重用；
特化以增加内涵——高度契合当前项目的需要。
</code></pre><p>范例代码可以从<a href="https://git.oschina.net/yyang/configuration" target="_blank" rel="external">https://git.oschina.net/yyang/configuration</a>下载。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在很多应用程序中，我们都需要一个配置类Configuration，通常从一个文本文件中读入配置信息，根据配置调整应用的行为。通过这样的方式，我们可以用相同的代码来适应不同的环境，达到&lt;strong&gt;灵活性&lt;/strong&gt;的目标。&lt;/p&gt;
&lt;p&gt;本文探索如何设计好这样的配置类。我们的重点不在于设计的产物——配置类——本身，而是在设计中的权衡取舍，以及取舍的原则。&lt;/p&gt;
    
    </summary>
    
    
      <category term="OOAD" scheme="http://www.yyang.io/tags/OOAD/"/>
    
      <category term="分析设计" scheme="http://www.yyang.io/tags/%E5%88%86%E6%9E%90%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="封装" scheme="http://www.yyang.io/tags/%E5%B0%81%E8%A3%85/"/>
    
      <category term="泛化" scheme="http://www.yyang.io/tags/%E6%B3%9B%E5%8C%96/"/>
    
      <category term="特化" scheme="http://www.yyang.io/tags/%E7%89%B9%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>正确区分属性和字段</title>
    <link href="http://www.yyang.io/2016/06/27/Dont-confuse-properties-and-fields/"/>
    <id>http://www.yyang.io/2016/06/27/Dont-confuse-properties-and-fields/</id>
    <published>2016-06-27T05:16:27.000Z</published>
    <updated>2016-07-05T05:04:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多开发人员搞不清属性和字段的区别，本文试图对其作出澄清。</p>
<a id="more"></a>
<p>在进行Java软件开发的时候，很多人都没有搞清Java对象中属性（Property）和字段（Field）的区别，以为属性就是字段。本文试图对这两个概念作一个澄清。</p>
<h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><p>首先上一个例子：平面直角坐标系中的矩形。</p>
<p>一个矩形的形状可以用宽（width）和高（height）来表示，而它的位置可以用左下角坐标lowerLeftCoordinate（例如(10, 5)）来表示。平面直角坐标系中任何一个点（Point）可以用这个点的坐标(x, y)来表示。</p>
<p>点Point的定义是这样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> yang.yu.training;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.persistence.Embeddable;</div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.Objects;</div><div class="line"></div><div class="line"><span class="meta">@Embeddable</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">        <span class="keyword">this</span>.y = y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.y = y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == other) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!(other <span class="keyword">instanceof</span> Point)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        Point that = (Point) other;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x == that.x &amp;&amp;</div><div class="line">                <span class="keyword">this</span>.y == that.y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Objects.hash(x, y);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Point("</span> + x + <span class="string">", "</span> + y + <span class="string">")"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Point <span class="title">of</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Point(x, y);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而矩形Rectangle的定义是这样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> yang.yu.training;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.Objects;</div><div class="line"><span class="keyword">import</span> java.util.UUID;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> String id = UUID.randomUUID().toString();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Point lowerLeftCoordinate;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> _width;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> _height;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>._width = width;</div><div class="line">        <span class="keyword">this</span>._height = height;</div><div class="line">        lowerLeftCoordinate = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> _width;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> _height;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> _width * _height;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSquare</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> _width == _height;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Point <span class="title">getLowerLeftCoordinate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> lowerLeftCoordinate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Point <span class="title">getLoweRightCoordinate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Point(lowerLeftCoordinate.getX() + _width, lowerLeftCoordinate.getY());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Point <span class="title">getUpperLeftCoordinate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Point(lowerLeftCoordinate.getX(), lowerLeftCoordinate.getY() + _height);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Point <span class="title">getUpperRightCoordinate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Point(lowerLeftCoordinate.getX() + _width, lowerLeftCoordinate.getY() + _height);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveHorizontally</span><span class="params">(<span class="keyword">int</span> delta)</span> </span>&#123;</div><div class="line">        lowerLeftCoordinate = <span class="keyword">new</span> Point(lowerLeftCoordinate.getX() + delta, lowerLeftCoordinate.getY());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveVertically</span><span class="params">(<span class="keyword">int</span> delta)</span> </span>&#123;</div><div class="line">        lowerLeftCoordinate = <span class="keyword">new</span> Point(lowerLeftCoordinate.getX(), lowerLeftCoordinate.getY() + delta);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveTo</span><span class="params">(Point point)</span> </span>&#123;</div><div class="line">        lowerLeftCoordinate = <span class="keyword">new</span> Point(lowerLeftCoordinate.getX() + point.getX(), lowerLeftCoordinate.getY() + point.getY());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == other) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!(other <span class="keyword">instanceof</span> Rectangle)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        Rectangle that = (Rectangle) other;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._width == that._width &amp;&amp;</div><div class="line">                <span class="keyword">this</span>._height == that._height;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Objects.hash(_width, _height);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Rectangle&#123;"</span> +</div><div class="line">                <span class="string">"_width="</span> + _width +</div><div class="line">                <span class="string">", _height="</span> + _height +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了方便，矩形宽度、高度和点坐标都用整数int而不是浮点数double来表示。</p>
<h2 id="属性和字段的定义"><a href="#属性和字段的定义" class="headerlink" title="属性和字段的定义"></a>属性和字段的定义</h2><p>在很多情况下，在一个类中，字段和属性往往一一对应，例如Point类中，我们有两个字段x和y，也有两个属性x和y与之一一对应：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> x;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> y;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面一行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> x;</div></pre></td></tr></table></figure>
<p>在Point类中定义了一个字段（Field），名为x。</p>
<p>根据JavaBean规范，下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义了一个可读（因为有getX()方法）、可写（因为有setX()方法）的属性（Property）x。属性的名字来自getX()或setX()。根据JavaBean规范，属性的名字是方法名getX/setX去掉get/set前缀之后，剩下的部分首字母改为小写来定义。因此，getX去掉get之后剩下X，再将它的首字母（在这里是唯一的字母）改为小写就是x。这就是属性名。同样地，在Rectangle类中，getWidth方法的存在意味着Rectangle类中存在一个名为width的属性。</p>
<h2 id="属性和字段之间没有必然的一一对应关系"><a href="#属性和字段之间没有必然的一一对应关系" class="headerlink" title="属性和字段之间没有必然的一一对应关系"></a>属性和字段之间没有必然的一一对应关系</h2><p>请牢记：</p>
<pre><code>在一个类之中，属性和字段没有必然的一一对应关系。
</code></pre><p>具体表现在：</p>
<h3 id="属性和字段的名称可以是不同的"><a href="#属性和字段的名称可以是不同的" class="headerlink" title="属性和字段的名称可以是不同的"></a>属性和字段的名称可以是不同的</h3><p>例如在Rectangle类中，字段<strong>_width</strong>对应的属性名是<strong>width</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> _width;			<span class="comment">//定义字段_width</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;		<span class="comment">//定义属性width</span></div><div class="line">    <span class="keyword">return</span> _width;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="有的字段没有对应的属性，有的属性没有对应的字段"><a href="#有的字段没有对应的属性，有的属性没有对应的字段" class="headerlink" title="有的字段没有对应的属性，有的属性没有对应的字段"></a>有的字段没有对应的属性，有的属性没有对应的字段</h3><p>在Rectangle类中，我们有一个area属性（由getArea()方法定义）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> _width * _height;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>却没有一个相应的area字段存在。这个属性是通过计算（width * height）得来的。</p>
<p>在Rectangle类中，只有左下角的坐标点，字段和属性一一对应：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Point lowerLeftCoordinate;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Point <span class="title">getLowerLeftCoordinate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> lowerLeftCoordinate;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而右下角、左上角、右上角的坐标点，只有相应的属性（loweRightCoordinate、upperLeftCoordinate和upperRightCoordinate），没有相应的字段。它们都是计算属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Point <span class="title">getLoweRightCoordinate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Point(lowerLeftCoordinate.getX() + _width, lowerLeftCoordinate.getY());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Point <span class="title">getUpperLeftCoordinate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Point(lowerLeftCoordinate.getX(), lowerLeftCoordinate.getY() + _height);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Point <span class="title">getUpperRightCoordinate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Point(lowerLeftCoordinate.getX() + _width, lowerLeftCoordinate.getY() + _height);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="有的属性是多个字段综合表现的结果"><a href="#有的属性是多个字段综合表现的结果" class="headerlink" title="有的属性是多个字段综合表现的结果"></a>有的属性是多个字段综合表现的结果</h3><p>例如判断矩形是不是正方形的属性（通过isSquare()方法定义），是比较_width和_height两个字段的结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSquare</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> _width == _height;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>面积属性也是这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> _width * _height;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="属性可以是只读、只写或读写的，而字段都是可读写的"><a href="#属性可以是只读、只写或读写的，而字段都是可读写的" class="headerlink" title="属性可以是只读、只写或读写的，而字段都是可读写的"></a>属性可以是只读、只写或读写的，而字段都是可读写的</h3><p>如果一个类中同时存在getAbc()（或isAbc()，如果属性类型是boolean类型）和setAbc()方法，那么属性abc就是可读可写的。如果没有相应的setAbc()方法，该属性就是只读的。如果没有相应的getAbc()（或isAbc()，如果属性类型是boolean类型）方法，该属性就是只写的。</p>
<p>下面的Rectangle类代码中，width和height属性都是只读的，它们通过Rectangle类的构造函数设置，然后就永远不可以改变了，因为类中没有定义setWidth()和setHeight()方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> _width;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> _height;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>._width = width;</div><div class="line">    <span class="keyword">this</span>._height = height;</div><div class="line">    lowerLeftCoordinate = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> _width;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> _height;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="属性是类外部接口的一部分，字段是类内部实现的一部分"><a href="#属性是类外部接口的一部分，字段是类内部实现的一部分" class="headerlink" title="属性是类外部接口的一部分，字段是类内部实现的一部分"></a>属性是类外部接口的一部分，字段是类内部实现的一部分</h2><p>其实，上面那些区别都是浮云，真正重要的是要记住：</p>
<pre><code>属性是类外部接口的一部分；
字段是类内部实现的一部分。
</code></pre><p>因此：</p>
<pre><code>属性是你的代码和你代码的客户的协议的一部分，必须精心设计，不可随意改动；
而字段属于你的自由王国，你可以随意添加、删除和修改，只要不影响类的外部接口。
</code></pre><p>无论是在设计一个系统还是一个类，区分其的外部接口和内部实现都是非常有意义的。在系统的层级，外部接口主要包含接口和抽象基类，而内部实现包含上述接口的实现类和和基类的具体子类。在类的层级，外部接口包含属性和公有(public)方法签名，而内部实现包括字段、私有方法和公有方法的方法体。接口和实现的区分比起字段和方法的区分具有更重大的意义。</p>
<pre><code>外部接口的“形诸外”是内部实现的“动于内”的结果。
</code></pre><p>字段代表内部实现的静态部分，属性代表外部接口的静态部分。方法属于动态部分。</p>
<h2 id="重要推论"><a href="#重要推论" class="headerlink" title="重要推论"></a>重要推论</h2><p>在软件开发领域，有一条基本原则：</p>
<pre><code>面向接口编程，不要面向实现编程。
</code></pre><p>因此我们可以得到这样的推论：</p>
<h3 id="先定义属性而不是字段"><a href="#先定义属性而不是字段" class="headerlink" title="先定义属性而不是字段"></a>先定义属性而不是字段</h3><pre><code>先定义属性（因为它是类接口的一部分），然后根据需要定义字段，而不是相反。
</code></pre><p>例如我在设计Rectangle类的时候，是根据外界对矩形的期待设计出它的长度、宽度、四个角的坐标、面积、是否正方形等属性，为了支撑这几个属性，我定义长度、宽度和左下角坐标三个字段；而不是先定义那几个字段，再通过IDE自动创建对应的属性（getter和setter）。</p>
<h3 id="不要为每个字段默认生成属性"><a href="#不要为每个字段默认生成属性" class="headerlink" title="不要为每个字段默认生成属性"></a>不要为每个字段默认生成属性</h3><pre><code>千万不要、不要、不要不假思索地为每个字段添加getter和setter方法生成属性。
</code></pre><p>我发现大多数程序员都是不假思索地先定义字段，然后利用IDE为所有的字段自动生成对应的读写属性。这是一种非常有害的习惯，会生成一个臃肿的、充满无用代码的类。直接将所有的字段设置为public的，或者封装为public属性，都违反了封装性原则，将大量的内部实现细节暴露给外界，加重了你的代码用户的认知负担，同时限制了你未来重构代码的自由度。</p>
<p>在很多时候，设计一个不可变类（或部分属性不可变）是非常有益的。也就是说，只有getter，没有setter。字段初始值通过构造函数参数传入。</p>
<h3 id="尽量通过方法而不是setter来修改字段值"><a href="#尽量通过方法而不是setter来修改字段值" class="headerlink" title="尽量通过方法而不是setter来修改字段值"></a>尽量通过方法而不是setter来修改字段值</h3><pre><code>尽量通过真正的方法而不是通过setter修改字段值。
</code></pre><p>本质上，getter和setter不是真正的方法，而是属性访问器。Java不像C#那样拥有专门的属性访问器语法，只得用getter和setter方法来代替。在面向对象的设计中，方法和字段是相互作用的：字段可以影响方法调用的结果，而方法可以修改字段的取值。</p>
<p>在Rectangle类中，我是通过三个move方法来修改lowerLeftCoordinate字段的值的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveHorizontally</span><span class="params">(<span class="keyword">int</span> delta)</span> </span>&#123;</div><div class="line">    lowerLeftCoordinate = <span class="keyword">new</span> Point(lowerLeftCoordinate.getX() + delta, lowerLeftCoordinate.getY());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveVertically</span><span class="params">(<span class="keyword">int</span> delta)</span> </span>&#123;</div><div class="line">    lowerLeftCoordinate = <span class="keyword">new</span> Point(lowerLeftCoordinate.getX(), lowerLeftCoordinate.getY() + delta);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveTo</span><span class="params">(Point point)</span> </span>&#123;</div><div class="line">    lowerLeftCoordinate = <span class="keyword">new</span> Point(lowerLeftCoordinate.getX() + point.getX(), lowerLeftCoordinate.getY() + point.getY());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而不是通过属性修改器来重新设置左下角坐标:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLowerLeftCoordinate</span><span class="params">(Point newCoordinate)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.lowerLeftCoordinate = lowerLeftCoordinate;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样做的原因是：</p>
<ol>
<li>隐藏内部实现。不必将“通过修改左下角坐标来实现矩形的移动”这样的内部实现细节呈现给代码的用户。</li>
<li>面向意图编程。因为用户的意图就是将矩形移动到一个新的位置，而不是重新设置它的左下角坐标。</li>
</ol>
<h2 id="JPA-Hibernate中区分属性和字段持久化"><a href="#JPA-Hibernate中区分属性和字段持久化" class="headerlink" title="JPA/Hibernate中区分属性和字段持久化"></a>JPA/Hibernate中区分属性和字段持久化</h2><p>在JPA和Hibernate这样的ORM软件中，我们可以根据属性/字段对实体进行查询。这时候必须区分是按属性还是按字段进行持久化。</p>
<p>JPA/Hibernate中，如果@Id注解如果定义在属性上，就是根据属性进行持久化的；如果是定义在字段上，就是根据字段来进行持久化的。</p>
<p>有什么不同？</p>
<p>我们先看字段持久化（@Id定义在id字段上）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> _width;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> _width;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在进行jpql或hql查询的时候，应该根据字段名<strong>_width</strong>而不是属性名<strong>width</strong>:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> o <span class="keyword">FROM</span> Rectangle o <span class="keyword">WHERE</span> o._width &gt; <span class="number">100</span></div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> o._width, o._height <span class="keyword">WHERE</span> o._width &gt; <span class="number">100</span></div></pre></td></tr></table></figure>
<p>下面是属性持久化（@Id定义在getId()方法上）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> _width;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> _width;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在进行jpql或hql查询的时候，应该根据属性名<strong>width</strong>而不是字段名<strong>_width</strong>:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> o <span class="keyword">FROM</span> Rectangle o <span class="keyword">WHERE</span> o.width &gt; <span class="number">100</span></div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> o.width, o.height <span class="keyword">WHERE</span> o.width &gt; <span class="number">100</span></div></pre></td></tr></table></figure>
<p>@Id字段定义在字段还是属性上决定了整个类的所有属性/字段的持久化策略。</p>
<p>范例代码可以从<a href="https://git.oschina.net/yyang/properties-and-fields.git" target="_blank" rel="external">https://git.oschina.net/yyang/properties-and-fields</a>下载。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多开发人员搞不清属性和字段的区别，本文试图对其作出澄清。&lt;/p&gt;
    
    </summary>
    
    
      <category term="OO" scheme="http://www.yyang.io/tags/OO/"/>
    
  </entry>
  
  <entry>
    <title>接口属于客户</title>
    <link href="http://www.yyang.io/2016/06/05/Interfaces-belong-to-their-clients-and-not-to-the-implementations/"/>
    <id>http://www.yyang.io/2016/06/05/Interfaces-belong-to-their-clients-and-not-to-the-implementations/</id>
    <published>2016-06-05T02:19:31.000Z</published>
    <updated>2016-07-05T05:04:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>“接口属于客户，不属于它所在的类型层次结构。”这是Robert C. Martin在他的名著《敏捷软件开发：原则、模式、实践》中提出来的观点。因此，接口应该表达客户领域的语义，由客户代码定义和控制，并和客户代码一起打包。</p>
<a id="more"></a>
<p>计划经济和市场经济的一个关键区别在于：计划经济是卖方（供应商）驱动生产，而市场经济是买方（消费者）驱动生产。计划经济的做法是：我按我的想法生产商品，管你合用不合用。结果往往如同刘若英的歌《一辈子的孤单》里唱的那样：“喜欢的人不出现，出现的人不喜欢”——你提供的不是消费者想要的，消费者想要的你没有提供。而市场经济的做法是：深入调研消费者的真实需求，针对这个需求生产满足这个需求的产品。结果是个双赢的局面：消费者的需求得到满足，供应者得到利润，同时杜绝了绝大部分的人力、资源和成本浪费。</p>
<p>现在我们都知道计划经济彻底失败，市场经济占了主流。但是软件开发实践中，很多开发者不明白这个道理，不自觉地遵循了计划经济的思路。他们虽然知道要面向接口编程，但却错误地从实现者的角度定义接口，并且将接口和实现类一起打包，而不是和接口的客户一起打包。</p>
<p>下面我们以开发在线考试系统为例，比较这两种方式的优缺点。下图是在线考试系统的基本领域模型：</p>
<img src="/2016/06/05/Interfaces-belong-to-their-clients-and-not-to-the-implementations/exam-domain-model.png" alt="在线考试系统领域模型" title="在线考试系统领域模型">
<p>在线考试中，我们可以把整个系统分解为两个模块：题库模块（questionlib）和考试模块（exam）。题库模块负责管理题库和试题，而考试模块负责创建考试，生成试卷，接收考生答案、计算分数等等。</p>
<p>在题库模块中可以管理多个题库（QuestionLib），每个题库包含一批试题（Question），试题有多种类型，图中列出了单选题（SingleChoiceQuestion）和判断题（JudgementQuestion）。单选题会包括一批选项（ChoiceOption）。</p>
<p>在考试模块中，我们在创建一场考试（Exam）的时候需要从指定的题库中抽取一定数量的各种题型的试题，生成一份试卷(ExamPaper)。每个考生（Student）拿到这份试卷生成自己的答卷（AnswerPaper），针对试卷中的每道试题给出自己的答案（QuestionAnswer）.</p>
<p>为了能够从题库中抽取试题生成试卷，必须定义一个题库服务接口（QuestionLibService），题库模块负责实现这个接口，而考试模块调用这个接口生成试卷。这个接口的定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuestionLibService</span> </span>&#123;</div><div class="line">    <span class="function">ExamPaper <span class="title">generateExamPaper</span><span class="params">(Exam exam, QuestionLib questionLib)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个接口表明：要根据考试exam的设定（包含哪些题型，每种题型包含多少道试题等）从指定的题库questionLib中抽选试题，生成一张试卷。</p>
<p>这里关键的设计决策是：</p>
<pre><code>由谁来定义、控制和拥有这个接口？也就是说，这个接口属于题库模块还是考试模块？
</code></pre><p>大多数消费者选择由题库模块——接口的实现方——来定义、控制和拥有这个接口。因为这样做非常符合直觉：这是一个<strong>“题库”</strong>服务接口，当然应该由题库模块实现，并和题库模块一起打包。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“接口属于客户，不属于它所在的类型层次结构。”这是Robert C. Martin在他的名著《敏捷软件开发：原则、模式、实践》中提出来的观点。因此，接口应该表达客户领域的语义，由客户代码定义和控制，并和客户代码一起打包。&lt;/p&gt;
    
    </summary>
    
      <category term="分析设计" scheme="http://www.yyang.io/categories/OOAD/"/>
    
    
      <category term="面向对象 分析设计" scheme="http://www.yyang.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%88%86%E6%9E%90%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>企业应用开发范式比较：数据驱动、特性驱动与领域驱动</title>
    <link href="http://www.yyang.io/2016/06/01/data-feature-domain-driven/"/>
    <id>http://www.yyang.io/2016/06/01/data-feature-domain-driven/</id>
    <published>2016-06-01T03:09:22.000Z</published>
    <updated>2016-09-27T09:35:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发企业应用的时候，典型的开发范式基本上可以总结为三种：</p>
<ul>
<li><strong>数据驱动</strong>：认为企业应用就是数据的存储和展示。其典型开发方式是“以数据库为中心的增删改查（CRUD）”，或者是Martin Fowler的《企业应用架构模式》中的“表模块”模式。</li>
<li><strong>特性驱动</strong>：认为企业应用是系统功能的集合，这些功能基本上是独立实现的。其典型的开发方式是Martin Fowler的《企业应用架构模式》中的“事务脚本”模式。</li>
<li><strong>领域驱动</strong>：认为企业应用像机器一样，由多个具有不同能力的零件（对象）组成，这些零件相互配合实现系统的功能。其典型的开发方式是Martin Fowler的《企业应用架构模式》中的“领域模型”模式。</li>
</ul>
<p>下面先对它们作一个总结性的对比：</p>
<table>
<thead>
<tr>
<th></th>
<th>数据驱动</th>
<th>特性驱动</th>
<th>领域驱动</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>软件世界观</strong></td>
<td>软件就是数据的存储和展示</td>
<td>软件是功能特性的集合</td>
<td>软件是由相互协作的智能零件组成的一台能动的机器</td>
</tr>
<tr>
<td><strong>核心关注点</strong></td>
<td>数据</td>
<td>功能特性</td>
<td>领域对象</td>
</tr>
<tr>
<td><strong>核心模型</strong></td>
<td>数据模型    /关系模型</td>
<td>用例模型</td>
<td>领域模型</td>
</tr>
<tr>
<td><strong>业务逻辑组织典型模式</strong></td>
<td>CRUD或表模块</td>
<td>事务脚本</td>
<td>领域模型</td>
</tr>
<tr>
<td><strong>业务逻辑实现典型位置</strong></td>
<td>数据库、表示层或缺失业务逻辑</td>
<td>应用层</td>
<td>领域层</td>
</tr>
<tr>
<td><strong>重用价值</strong></td>
<td>低</td>
<td>较低</td>
<td>高</td>
</tr>
<tr>
<td><strong>扩展成本</strong></td>
<td>极高</td>
<td>高</td>
<td>低</td>
</tr>
<tr>
<td><strong>问题域/解决方案域语义距离</strong></td>
<td>大</td>
<td>较大</td>
<td>小</td>
</tr>
</tbody>
</table>
<p>先做一个总结陈词（我不会为这个论断道歉）：</p>
<pre><code>在三种开发范式中，数据驱动最差，领域驱动最好，特性驱动介于两者之间。
</code></pre><p>很不幸的是：在当前企业应用开发中，数据驱动的CRUD方式占了统治地位。</p>
<h2 id="1-问题域简介"><a href="#1-问题域简介" class="headerlink" title="1. 问题域简介"></a>1. 问题域简介</h2><p>在本文中，我以一个银行账户应用开发为例，说明三种开发范式的典型实现方式以及它们的优缺点。</p>
<p>个人和机构都可能在银行开设一个或多个银行账户。账户的类型都很多种，我们这里只关注储蓄账户和信用账户两种类型。</p>
<p>对每种账户，都可以进行存款、取款或转账等操作，也可以查看当前余额和获取一段时间的对账单。</p>
<p>每种账户在取款或转账时都会有限额。对储蓄账户来说，限额就是不得超过当前账户余额；对信用账户来说，限额就是当前信用额度减去已经刷卡消费的金额。</p>
<p>储蓄账户和信用账户还有很多方面的区别，例如信用卡在取现是需要支付手续费等，但为了减少复杂性，我们的范例中先忽略掉这方面的内容。</p>
<p>下面我们用三种范式分别实现该问题域的解决方案，然后分析各种范式的优劣得失。为了便于比较，三种范式都采用相同的架构——N层应用架构。</p>
<h2 id="2-数据驱动范式"><a href="#2-数据驱动范式" class="headerlink" title="2. 数据驱动范式"></a>2. 数据驱动范式</h2><p>数据驱动设计范式的软件世界观认为：软件是用于处理数据的虚拟机器。软件开发的核心关注点应该是数据，软件的设计和构建应该围绕数据的存储、检索和展现来开展。</p>
<p>数据驱动设计范式以数据模型为核心和出发点来进行开发。如果采用关系数据库为数据存储媒介，软件的核心就是关系模型，通常表示为E-R图（实体-关系图）的形式。</p>
<p>数据驱动设计范式认为，对数据只有四种可能的操作：增（Create）、删（Delete）、改（Update）、查（Retrieve），简称CRUD。</p>
<h3 id="2-1-数据模型"><a href="#2-1-数据模型" class="headerlink" title="2.1 数据模型"></a>2.1 数据模型</h3><p>问题域的表述中有这样一种说法：“账户的类型都很多种，我们这里只关注储蓄账户和信用账户两种类型。”这里暗示了一个类型层级的存在：储蓄账户和信用账户都是一种账户。在“账户”这个概念层级上，它们有相同的行为——存款、取款、转账、获取余额、获取对账单；但在具体细节上，两种账户实现相同的行为时遵循不同的业务规则。</p>
<p>这里的一个重大选择是：</p>
<ul>
<li>只创建一个统一的<strong>账户（Account）</strong>实体（对应到数据库中的一张表），用一个<strong>鉴别列</strong>（例如名为CATEGORY的字符串型列）来区分储蓄账户和信用账户，或者：</li>
<li>将储蓄账户和信用账户分别建模为独立的实体SavingAccount和CreditAccount，不将它们看成是同类的东西。</li>
</ul>
<p>同样地，银行账户的拥有人可能是个人，也可能是公司、政府部门或其他机构。如果是个人，我们要记录他/她的姓名、身份证号码等；如果是机构，我们要记录其名称、所属地区等等信息。</p>
<p>在数据建模的时候，也有两种选择：</p>
<ul>
<li>只创建一个统一的Party实体，统一代表个人和机构。用一个鉴别列区分该Party是一个自然人还是一家机构。该表中有些列（例如id和名称）是个人和机构共有的；而一些列是个人特有的（例如性别、身份证号码等），一些列是机构特有的（例如所属地区、组织机构代码等）。或者：</li>
<li>将自然人和机构分别建模为独立的实体Person和Organization，不将两者看成是同类的东西。</li>
</ul>
<p>每个账户都属于一个持有人(Owner)，该持有人可能是个人，也可能是机构。如果采用第一种方式，在Account表（或者SavingAccount和CreditAccount两张表中）只需要定义一个owner_id字段，指向Party表的主键，根据对应的Party的鉴别列可以知道持有人是个人还是机构。如果采用第二种方式，在Account/SavingAccount/CreditAccount表中必须定义三个字段：owner_person_id（自然人id）、owner_organization_id（机构id）和owner_type（持有人类型，有个人/机构两种选择）。如果持有人是个人，owner_person_id的取值为某个人的id，owner_organization_id的取值为null，owner_type的取值为PERSON。；如果持有人是机构，owner_person_id的取值为null，owner_organization_id的取值为某个机构的id，owner_type的取值为ORG。</p>
<p>由于</p>
<h2 id="3-特性驱动范式"><a href="#3-特性驱动范式" class="headerlink" title="3. 特性驱动范式"></a>3. 特性驱动范式</h2><h2 id="4-领域驱动范式"><a href="#4-领域驱动范式" class="headerlink" title="4. 领域驱动范式"></a>4. 领域驱动范式</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发企业应用的时候，典型的开发范式基本上可以总结为三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据驱动&lt;/strong&gt;：认为企业应用就是数据的存储和展示。其典型开发方式是“以数据库为中心的增删改查（CRUD）”，或者是Martin Fowler的《企业应用架构模式
    
    </summary>
    
    
      <category term="架构模式" scheme="http://www.yyang.io/tags/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="面向对象" scheme="http://www.yyang.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="面向过程" scheme="http://www.yyang.io/tags/%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程与行为参数化</title>
    <link href="http://www.yyang.io/2016/04/25/FP-and-Behavior-Parameterization/"/>
    <id>http://www.yyang.io/2016/04/25/FP-and-Behavior-Parameterization/</id>
    <published>2016-04-25T10:08:31.000Z</published>
    <updated>2016-07-05T05:04:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>废话少说，从实例开始，Show me the code。我们的实例就是从一堆苹果中选出符合某种条件的苹果。</p>
<p>我们知道，苹果有很多属性，都可以用来作为筛选的标准。简单起见，我们只选择三个属性：颜色，大小、产地。属性的取值范围是：</p>
<ul>
<li>颜色：红色，绿色</li>
<li>大小：大，小，中等</li>
<li>产地：陕西，甘肃，山东，进口</li>
</ul>
<p>苹果Apple类定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> String id = UUID.randomUUID().toString();</div><div class="line"></div><div class="line">  <span class="keyword">private</span> Color color;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">double</span> weight;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> Area area;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(Color color, <span class="keyword">double</span> weight, Area area)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.color = color;</div><div class="line">    <span class="keyword">this</span>.weight = weight;</div><div class="line">    <span class="keyword">this</span>.area = area;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> Color <span class="title">getColor</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> color;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> weight;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> Area <span class="title">getArea</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> area;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Apple)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    Apple apple = (Apple) o;</div><div class="line">    <span class="keyword">return</span> Objects.equals(id, apple.id);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Objects.hash(id);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>颜色Color是个枚举：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;</div><div class="line">    GREEN,</div><div class="line">    RED</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>产地Area是另一个枚举：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Area &#123;</div><div class="line">    SHAN_XI,</div><div class="line">    SHAN_DONG,</div><div class="line">    GAN_SU,</div><div class="line">    ABROAD</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="无参数化"><a href="#无参数化" class="headerlink" title="无参数化"></a>无参数化</h2><p>我们可以根据每个属性的每个取值分别编写一个筛选苹果的方法，例如：</p>
<p>（1）选择红苹果</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleSelectorNoneParameterized</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Set&lt;Apple&gt; apples = <span class="keyword">new</span> HashSet&lt;Apple&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(Apple... apples)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.apples = <span class="keyword">new</span> HashSet&lt;Apple&gt;(Arrays.asList(apples));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Apple&gt; <span class="title">selectRed</span><span class="params">()</span> </span>&#123;</div><div class="line">        Set&lt;Apple&gt; results = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (Apple apple : apples) &#123;</div><div class="line">            <span class="keyword">if</span> (apple.getColor() == Color.RED) &#123;</div><div class="line">                results.add(apple);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> results;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（2）选择进口苹果</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;Apple&gt; <span class="title">selectAbroad</span><span class="params">()</span> </span>&#123;</div><div class="line">    Set&lt;Apple&gt; results = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (Apple apple : apples) &#123;</div><div class="line">        <span class="keyword">if</span> (apple.getArea() == Area.ABROAD) &#123;</div><div class="line">            results.add(apple);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有各种组合选择，例如：</p>
<p>（3）选择进口的红苹果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;Apple&gt; <span class="title">selectRedAndAbroad</span><span class="params">()</span> </span>&#123;</div><div class="line">    Set&lt;Apple&gt; results = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (Apple apple : apples) &#123;</div><div class="line">        <span class="keyword">if</span> (apple.getArea() == Area.ABROAD &amp;&amp; apple.getArea() == Area.ABROAD) &#123;</div><div class="line">            results.add(apple);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（4）选择进口的、大个的红苹果(我们假设重100克以上的是大苹果)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;Apple&gt; <span class="title">selectRedAndHeavyAndAbroad</span><span class="params">()</span> </span>&#123;</div><div class="line">    Set&lt;Apple&gt; results = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (Apple apple : apples) &#123;</div><div class="line">        <span class="keyword">if</span> (apple.getArea() == Area.ABROAD </div><div class="line">        	&amp;&amp; apple.getArea() == Area.ABROAD</div><div class="line">        	&amp;&amp; apple.getWeight() &gt;= <span class="number">100</span>) &#123;</div><div class="line">            results.add(apple);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们面临的问题是什么？</p>
<ol>
<li><p>组合爆炸</p>
<p> 我们只选择了三个属性维度作为筛选条件，只用And作为组合方式，也需要定义很多个筛选方法：</p>
<ul>
<li>单条件筛选方法：2 + 3 + 4 = 9个</li>
<li>两条件组合筛选方法：2 × 3 + 2 × 4 + 3 × 4 = 26个</li>
<li>三条件组合筛选方法：2 × 3 × 4 = 24个</li>
<li><p>合计：7 + 26 + 24 = 57个</p>
<p>如果增加更多的可筛选属性（例如品种、是否有机），或者更多的属性值（例如红绿之外还有黄色），或者加入Or和Not组合方式，后果不堪设想。</p>
</li>
</ul>
</li>
<li><p>代码重复</p>
<p> 上面的设计中，代码重复随处可见。每个筛选方法除了if部分外，其余部分都完全相同。我们知道在软件设计中，“重复是万恶之源。”</p>
</li>
<li><p>对变化没有抵抗力</p>
<p> 当增加更多的可筛选属性（例如品种、是否有机），或者更多的可选属性值（例如红绿之外还有黄色）时，我们别无选择，只能修改AppleSelector，加上这些选择方法，这样做严重违反“开放封闭原则OCP”。OCP原则要求：当需要扩展系统的能力时，永远不要修改现有的类，而是通过添加更多的类（通常是现有类的子类或现有接口的实现类）来实现，也就是说：只添加，不修改。</p>
</li>
</ol>
<h2 id="数据参数化"><a href="#数据参数化" class="headerlink" title="数据参数化"></a>数据参数化</h2><p>当然，我们是专业的程序猿，对付上述问题，我们已经拥有一个趁手的武器，叫做“数据参数化”。直接看例子：</p>
<p>（1）根据颜色筛选苹果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;Apple&gt; <span class="title">selectByColor</span><span class="params">(Color color)</span> </span>&#123;</div><div class="line">    Set&lt;Apple&gt; results = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (Apple apple : apples) &#123;</div><div class="line">        <span class="keyword">if</span> (apple.getColor() == color) &#123;</div><div class="line">            results.add(apple);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（2）根据颜色和重量筛选苹果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;Apple&gt; <span class="title">selectByColorAndWeightMoreThan</span><span class="params">(Color color, <span class="keyword">int</span> threshold)</span> </span>&#123;</div><div class="line">    Set&lt;Apple&gt; results = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (Apple apple : apples) &#123;</div><div class="line">        <span class="keyword">if</span> (apple.getColor() == color &amp;&amp; apple.getWeight() &gt; threshold) &#123;</div><div class="line">            results.add(apple);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> results;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>数据参数化就是：<strong>根据外界传入的不同的数据值，调整算法的输出</strong>。在数据参数化中，不是在当前代码中列举每一个可能的属性值，而是只针对属性（或者“维度”，如果你像我一样喜欢用数学的隐喻）编写程序，属性值由代码的使用者在使用时传入。因此我们不再有selectRed()和selectGreen()方法，而是用一个统一的selectByColor()方法取而代之，用Color作为方法的参数。如果用户传入的Color是Red，就给他选出红苹果；如果用户传入的是Green，就给他选出绿苹果。color就是selectByColor()方法的数据参数。</p>
<p>通过对筛选条件作数据参数化，我们大大缓解了非参数化的方式面临问题：</p>
<ol>
<li><p>降低组合爆炸</p>
<p> 仍然是选择了三个属性维度作为筛选条件，只用And作为组合方式：</p>
<ul>
<li>单条件筛选方法：3个</li>
<li>两条件组合筛选方法：3个</li>
<li>三条件组合筛选方法：1个</li>
<li>合计：7个</li>
</ul>
</li>
<li><p>减少代码重复</p>
<p> 由于减少了方法的数量，代码重复大大降低了，但重复代码仍然遍布在剩下的7个筛选方法上。那段For each…循环代码让人如鲠在喉，如刺在背。</p>
</li>
<li><p>部分适应变化</p>
<p> 由于方法签名和实现中排除了属性值（红色，进口……），设计做到了对属性值的变化封闭，在未来需要添加更多的属性值时不需要修改现有代码。但是方法签名中仍然包含属性（颜色、产地……），因此没能做到对属性的变化封闭，当由更多的可筛选属性（例如品种）时，仍然需要修改现有代码。</p>
</li>
</ol>
<p>没达到尽善尽美之前睡不着觉是优秀程序员的必备素质。我们还有没有更进一步的可能，在山穷水复疑无路之际，发现柳暗花明又一村？</p>
<p>还真的有这样的方法，隆重推出：<strong>行为参数化</strong></p>
<h2 id="行为参数化"><a href="#行为参数化" class="headerlink" title="行为参数化"></a>行为参数化</h2><p>我们的问题是思考深度不够，所以提供的解决方案都不够超然，而是太过“滞于物”了。在非参数化的形式中，我们的注意力放在<strong>属性值</strong>（红、绿、轻、重、山东、陕西……）一级；在数据参数化形式中，我们的注意力放在<strong>属性</strong>（颜色、重量、产地）一级。我们不知道用户会按什么条件筛选苹果，因此列出所有的属性的所有的组合；但是未来属性值和属性都有可能增加，因此我们的“所有”很快变成了“部分”，又需要修改和增补原来的设计。目前的两种设计，既<strong>过剩</strong>又<strong>短缺</strong>。“过剩”是因为我们提供了太多的筛选方法，其中绝大部分也许用户将来根本用不上；“短缺”是因为我们只能穷举目前已知的筛选条件，无法应对未来的扩展。</p>
<p>让我们回到原始的需求，看看能否找出根本的解决之道：</p>
<pre><code>从一堆苹果中选出符合条件的苹果
</code></pre><p>谁来定义怎样叫做“符合条件”？</p>
<p>我们实际上陷入了“职责错配”的困境。我们假设我们（代码库的实现者）需要/能够知道所有筛选条件，并针对这些筛选条件给出了所有的筛选实现。我们做了下面这样的不可靠的假设：</p>
<ol>
<li>我们只会根据根据苹果本身的属性筛选苹果（实际上，我们可能在夏天选择红苹果，冬天选择绿苹果，筛选条件“时间”并不是苹果本身的属性）；</li>
<li>苹果的属性只有三种：颜色、大小、产地（实际上，还有很多其他的属性可能成为筛选条件，例如品种，是否有机）；</li>
<li>每种属性的取值范围都是已知的，覆盖了所有可能的值，例如产地只有陕西、山东、甘肃和进口（实际上，别的省份也种苹果，也许“进口”太笼统，需要具体化为每个国家）。</li>
</ol>
<p>因此：</p>
<pre><code>为了得到一个通用的设计，我们不应该对筛选条件做任何的假设和限定，应该由代码的使用者来定义筛选条件：代码的使用者把筛选方法交给我，我据此给他选出符合条件的苹果。
</code></pre><p>“把筛选方法交给我，我使用它来执行筛选”的方式，就是“行为参数化”，即：<strong>根据外界传入的不同行为，调整算法的输出</strong>。代码的使用者将一种行为方式以参数的形式注入我们的代码，我们的代码内部执行这些行为，返回代码使用者期待的结果。</p>
<p>如果你学习过设计模式，你就会想到，“策略模式”是实现行为参数化的绝佳方法，其实现方式可归纳为：</p>
<ol>
<li>定义一个策略接口，代表筛选的方法；</li>
<li>筛选苹果的代码通过参数接收这个策略接口的实现。在筛选时，将每一个苹果提交给它去判断是否满足条件；</li>
<li>代码的使用者负责提供策略接口的实现类，代表自己的筛选方法。</li>
</ol>
<p><strong>定义策略接口</strong></p>
<p>我们首先针对筛选方法定义一个策略接口AppleSelectMethod：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppleSelectMethod</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSatisfiedBy</span><span class="params">(Apple apple)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法isSatisfiedBy用于判断一个苹果是否满足筛选条件。</p>
<p><strong>实现筛选算法</strong></p>
<p>然后我们的苹果选择器的筛选方法就可以合并为一个了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleSelectorBehaviorParameterized</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Set&lt;Apple&gt; apples = <span class="keyword">new</span> HashSet&lt;Apple&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(Apple... apples)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.apples = <span class="keyword">new</span> HashSet&lt;Apple&gt;(Arrays.asList(apples));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Apple&gt; <span class="title">selectApple</span><span class="params">(AppleSelectMethod method)</span> </span>&#123;</div><div class="line">        Set&lt;Apple&gt; results = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (Apple apple : apples) &#123;</div><div class="line">            <span class="keyword">if</span> (method.isSatisfiedBy(apple)) &#123;</div><div class="line">                results.add(apple);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> results;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>数据参数化传入一个“名词”，行为参数化传入一个“动词”。</p>
<p>可以看出“行为参数化”有着非常巨大的优势：</p>
<ol>
<li><p>消除组合爆炸</p>
<p> 由于我们不预先定义筛选方式，将筛选方式转交给代码库的使用者按需定义，因此完全没有组合爆炸的问题。</p>
</li>
<li><p>消除重复</p>
<p> 我们将所有的组合方法合并为一个，完全消除了代码重复的问题。</p>
</li>
<li><p>适应变化</p>
<p> 不管是增加了多少的筛选方式，现有算法都可以支持，而且不需要做任何修改。</p>
</li>
</ol>
<p>至此，我们作为代码库的提供者的责任已经完成。下面转到代码库的使用者的角色。库使用者的责任是定义具体的筛选行为，也就是提供策略接口AppleSelectMethod的实现类。</p>
<p>提供策略接口实现有几种不同的方式。</p>
<h3 id="顶层实现类方式"><a href="#顶层实现类方式" class="headerlink" title="顶层实现类方式"></a>顶层实现类方式</h3><p>最常用的方式就是由代码库使用者按需定义自己的策略接口实现类。例如根据颜色和重量筛选：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleSelectByColorAndWeight</span> <span class="keyword">implements</span> <span class="title">AppleSelectMethod</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Color color;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> weightThreshold;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppleSelectByColorAndWeight</span><span class="params">(Color color, <span class="keyword">double</span> weightThreshold)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.color = color;</div><div class="line">        <span class="keyword">this</span>.weightThreshold = weightThreshold;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSatisfiedBy</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> apple.getColor() == color &amp;&amp; apple.getWeight() &gt;= weightThreshold;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以通过单元测试验证筛选方法的正确性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BehaviorParameterizedByClassTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Apple redAndHeavy = <span class="keyword">new</span> Apple(Color.RED, <span class="number">100</span>, Area.ABROAD);</div><div class="line">    <span class="keyword">private</span> Apple redAndLight = <span class="keyword">new</span> Apple(Color.RED, <span class="number">30</span>, Area.GAN_SU);</div><div class="line">    <span class="keyword">private</span> Apple greenAndHeavy = <span class="keyword">new</span> Apple(Color.GREEN, <span class="number">80</span>, Area.SHAN_DONG);</div><div class="line">    <span class="keyword">private</span> Apple greenAndLight = <span class="keyword">new</span> Apple(Color.GREEN, <span class="number">40</span>, Area.GAN_SU);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> AppleSelectorBehaviorParameterized appleSelector;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        appleSelector = <span class="keyword">new</span> AppleSelectorBehaviorParameterized();</div><div class="line">        appleSelector.load(redAndHeavy, redAndLight, greenAndLight, greenAndHeavy);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectRedAndHeavyApple</span><span class="params">()</span> </span>&#123;</div><div class="line">        Set&lt;Apple&gt; selected = appleSelector.selectApple(<span class="keyword">new</span> AppleSelectByColorAndWeight(Color.RED, <span class="number">50</span>));</div><div class="line">        assertThat(selected, hasItems(redAndHeavy));</div><div class="line">        assertThat(selected, not(hasItems(redAndLight, greenAndHeavy, greenAndLight)));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>顶层实现类的方式有个缺点：系统中充斥着大量的策略接口的实现类。这些类往往只使用一次，却永久存在于系统中，增加了代码阅读者的认知负担。</p>
<h3 id="匿名内类"><a href="#匿名内类" class="headerlink" title="匿名内类"></a>匿名内类</h3><p>因为代表筛选条件的类通常都只是一次性使用（在代码基中只有一个地方使用到），因此不值得把它们定义为顶层类，只需要在使用到策略接口的地方即时提供一个匿名内类就足够了，范例代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BehaviorParameterizedByInnerClassTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Apple redAndHeavy = <span class="keyword">new</span> Apple(Color.RED, <span class="number">100</span>, Area.ABROAD);</div><div class="line">    <span class="keyword">private</span> Apple redAndLight = <span class="keyword">new</span> Apple(Color.RED, <span class="number">30</span>, Area.GAN_SU);</div><div class="line">    <span class="keyword">private</span> Apple greenAndHeavy = <span class="keyword">new</span> Apple(Color.GREEN, <span class="number">80</span>, Area.SHAN_DONG);</div><div class="line">    <span class="keyword">private</span> Apple greenAndLight = <span class="keyword">new</span> Apple(Color.GREEN, <span class="number">40</span>, Area.GAN_SU);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> AppleSelectorBehaviorParameterized appleSelector;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        appleSelector = <span class="keyword">new</span> AppleSelectorBehaviorParameterized();</div><div class="line">        appleSelector.load(redAndHeavy, redAndLight, greenAndLight, greenAndHeavy);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectRedApple</span><span class="params">()</span> </span>&#123;</div><div class="line">        Set&lt;Apple&gt; selected = appleSelector.selectApple(<span class="keyword">new</span> AppleSelectMethod() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSatisfiedBy</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> apple.getColor() == Color.RED;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        assertThat(selected, hasItems(redAndHeavy, redAndLight));</div><div class="line">        assertThat(selected, not(hasItems(greenAndHeavy, greenAndLight)));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectRedAndHeavyApple</span><span class="params">()</span> </span>&#123;</div><div class="line">        Set&lt;Apple&gt; selected = appleSelector.selectApple(<span class="keyword">new</span> AppleSelectMethod() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSatisfiedBy</span><span class="params">(Apple apple)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> apple.getColor() == Color.RED &amp;&amp; apple.getWeight() &gt; <span class="number">50</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        assertThat(selected, hasItems(redAndHeavy));</div><div class="line">        assertThat(selected, not(hasItems(redAndLight, greenAndHeavy, greenAndLight)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>匿名内类的方式也有缺陷：我们只需要一个筛选方法，它却传给我一个完整的类实现。大量的样板代码污染了我们的代码基，分散了我们的注意力。它是一种“非本质复杂性”（并非来源于问题域的本质复杂性，而是源于编程语言的技术缺陷），应该彻底消除。</p>
<p>Java 8的lambda表达式，让我们可以消除这种非本质复杂性。</p>
<h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>当筛选苹果的时候，我需要的是一个筛选方法（一段代码），而不是一个完整的类。在Java 8之前，我们无法做到直接将代码传递给方法，只能将代码封装为一个类中的一个方法，然后传递这个类。Java 8改变了一切，支持函数式编程，从此，代码（函数）成为和数据（数值、字符串、对象）一样的一等公民，可以传递给方法作为参数，可以赋值给变量和字段，甚至可以作为方法的返回值返回。下面是采用Lambda表达式筛选苹果的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BehaviorParameterizedByLambdaTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Apple redAndHeavy = <span class="keyword">new</span> Apple(Color.RED, <span class="number">100</span>, Area.ABROAD);</div><div class="line">    <span class="keyword">private</span> Apple redAndLight = <span class="keyword">new</span> Apple(Color.RED, <span class="number">30</span>, Area.GAN_SU);</div><div class="line">    <span class="keyword">private</span> Apple greenAndHeavy = <span class="keyword">new</span> Apple(Color.GREEN, <span class="number">80</span>, Area.SHAN_DONG);</div><div class="line">    <span class="keyword">private</span> Apple greenAndLight = <span class="keyword">new</span> Apple(Color.GREEN, <span class="number">40</span>, Area.GAN_SU);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> AppleSelectorBehaviorParameterized appleSelector;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        appleSelector = <span class="keyword">new</span> AppleSelectorBehaviorParameterized();</div><div class="line">        appleSelector.load(redAndHeavy, redAndLight, greenAndLight, greenAndHeavy);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectRedApple</span><span class="params">()</span> </span>&#123;</div><div class="line">        Set&lt;Apple&gt; selected = appleSelector.selectApple(</div><div class="line">                apple -&gt; apple.getColor() == Color.RED);</div><div class="line">        assertThat(selected, hasItems(redAndHeavy, redAndLight));</div><div class="line">        assertThat(selected, not(hasItems(greenAndHeavy, greenAndLight)));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectRedAndHeavyApple</span><span class="params">()</span> </span>&#123;</div><div class="line">        Set&lt;Apple&gt; selected = appleSelector.selectApple(</div><div class="line">                apple -&gt; apple.getColor() == Color.RED &amp;&amp; apple.getWeight() &gt; <span class="number">50</span>);</div><div class="line">        assertThat(selected, hasItems(redAndHeavy));</div><div class="line">        assertThat(selected, not(hasItems(redAndLight, greenAndHeavy, greenAndLight)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本质上，上面的例子中，lambda表达式apple -&gt; apple.getColor() == Color.RED和apple -&gt; apple.getColor() == Color.RED &amp;&amp; apple.getWeight() &gt; 50都是函数式接口（只有一个抽象方法的接口）AppleSelectMethod的即时实现。</p>
<p>采用Lambda表达式语法之后，代码重新变得简洁和优美，消除了不必要的技术代码行，直接用面向业务的语言编写代码。</p>
<p>通过上面的例子，我们可以看到，行为参数化的本质就是将行为（如同数据一样）传递给实现主算法的方法，影响主算法的输出结果。在Java 8中，Lambda表达式实际上是个匿名函数（函数类似于方法，但不与一个具体对象关联），我喜欢这样描述它：</p>
<pre><code>传递时是名词
执行时是动词
</code></pre><p>就像一台发动机，在被作为货物运输时是名词——被处理的被动对象，而在加电运转时是动词——一个能动的机械。运输时我们关注的是它的属性（重量、体积），运行时我们关注的是它的行为。</p>
<h3 id="各种参数化方式的比较"><a href="#各种参数化方式的比较" class="headerlink" title="各种参数化方式的比较"></a>各种参数化方式的比较</h3><p>我们可以从僵化性/灵活性与繁杂性/简洁性两个维度比较各种参数化方式的优劣：</p>
<img src="/2016/04/25/FP-and-Behavior-Parameterization/Big-Picture-of-Software-Development.png" alt="各种参数化方式比较" title="各种参数化方式比较">
<ul>
<li>在僵化性/灵活性的维度上，数据参数化是相当僵化的（相前面所说的，既过剩又短缺），行为参数化则灵活的多（按需即时实现）。</li>
<li>在繁杂性/简洁性的维度上，数据参数化、实现类和匿名内类形式的行为参数化都比较繁杂（充满重复代码或样板代码），而lambda则非常简洁（直接用领域词汇表达业务意图）。</li>
</ul>
<h2 id="进一步泛化"><a href="#进一步泛化" class="headerlink" title="进一步泛化"></a>进一步泛化</h2><p>目前为止，一切都很优雅：通过行为参数化，我们得到了简单性和灵活性的高度统一。我们通过逐步提高抽象的层级，使得筛选苹果的方法越来越通用：</p>
<ol>
<li>一开始，我们直接关注属性值（数学隐喻是坐标值，例如红，绿，轻，重），针对属性值进行筛选；</li>
<li>通过数据参数化，我们将抽象层级提高到属性（数学隐喻是维度，例如颜色、重量）一级，针对属性进行筛选，将提供属性值的责任转移给代码库的使用者；</li>
<li>通过行为参数化，我们完全抛弃“只能根据苹果自身的属性筛选苹果”这样一个不合理的假设，将定义筛选条件的责任完全转移给代码库的使用者。</li>
</ol>
<p>通过“抽象”和“职责分离”，我们得到了一个通用的解决方案。</p>
<p>但是，<strong>还不够通用！</strong></p>
<p>我们的库代码，还被绑定在“苹果”这个特定领域的概念上。</p>
<p>我们的AppleSelector类是Apple相关的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleSelectorBehaviorParameterized</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Set&lt;Apple&gt; apples = <span class="keyword">new</span> HashSet&lt;Apple&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(Apple... apples)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.apples = <span class="keyword">new</span> HashSet&lt;Apple&gt;(Arrays.asList(apples));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Apple&gt; <span class="title">selectApple</span><span class="params">(AppleSelectMethod method)</span> </span>&#123;</div><div class="line">        Set&lt;Apple&gt; results = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (Apple apple : apples) &#123;</div><div class="line">            <span class="keyword">if</span> (method.isSatisfiedBy(apple)) &#123;</div><div class="line">                results.add(apple);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> results;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们的策略接口AppleSelectMethod也是Apple相关的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppleSelectMethod</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSatisfiedBy</span><span class="params">(Apple apple)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这意味着当我们要选择桔子的时候，需要另外编写一套相似的代码。</p>
<p>我们完全应该而且可以将我们的设计方案泛化到领域无关的、最通用的层次，不再限定到苹果、桔子或其他任何具体事物上。</p>
<p>我们将AppleSelectorBehaviorParameterized泛化为ItemSelector类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemSelector</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Set&lt;T&gt; items = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(T... items)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.items = <span class="keyword">new</span> HashSet&lt;T&gt;(Arrays.asList(items));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;T&gt; <span class="title">select</span><span class="params">(ItemSelectCriteria&lt;T&gt; method)</span> </span>&#123;</div><div class="line">        Set&lt;T&gt; results = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (T item : items) &#123;</div><div class="line">            <span class="keyword">if</span> (method.isSatisfiedBy(item)) &#123;</div><div class="line">                results.add(item);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> results;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将AppleSelectMethod策略接口泛化为ItemSelectCriteria接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemSelectCriteria</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSatisfiedBy</span><span class="params">(T item)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是测试方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemSelectorTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Apple redAndHeavy = <span class="keyword">new</span> Apple(Color.RED, <span class="number">100</span>, Area.ABROAD);</div><div class="line">    <span class="keyword">private</span> Apple redAndLight = <span class="keyword">new</span> Apple(Color.RED, <span class="number">30</span>, Area.GAN_SU);</div><div class="line">    <span class="keyword">private</span> Apple greenAndHeavy = <span class="keyword">new</span> Apple(Color.GREEN, <span class="number">80</span>, Area.SHAN_DONG);</div><div class="line">    <span class="keyword">private</span> Apple greenAndLight = <span class="keyword">new</span> Apple(Color.GREEN, <span class="number">40</span>, Area.GAN_SU);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ItemSelector&lt;Apple&gt; selector;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        selector = <span class="keyword">new</span> ItemSelector();</div><div class="line">        selector.load(redAndHeavy, redAndLight, greenAndLight, greenAndHeavy);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectRedApple</span><span class="params">()</span> </span>&#123;</div><div class="line">        Set&lt;Apple&gt; selected = selector.select(</div><div class="line">                apple -&gt; apple.getColor() == Color.RED);</div><div class="line">        assertThat(selected, hasItems(redAndHeavy, redAndLight));</div><div class="line">        assertThat(selected, not(hasItems(greenAndHeavy, greenAndLight)));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectRedAndHeavyApple</span><span class="params">()</span> </span>&#123;</div><div class="line">        Set&lt;Apple&gt; selected = selector.select(</div><div class="line">                apple -&gt; apple.getColor() == Color.RED &amp;&amp; apple.getWeight() &gt; <span class="number">50</span>);</div><div class="line">        assertThat(selected, hasItems(redAndHeavy));</div><div class="line">        assertThat(selected, not(hasItems(redAndLight, greenAndHeavy, greenAndLight)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总结一下，我们通过逐级提高抽象层次，得到了一个越来越通用的解决方案：</p>
<pre><code>具体事物的属性值 -&gt; 具体事物的属性 -&gt; 具体事物 -&gt; 一般事物
</code></pre><p>我们从</p>
<pre><code>从一堆苹果中筛选出红色的大苹果
</code></pre><p>这样一个非常领域特定的问题得出了</p>
<pre><code>从一个集合中根据某种条件筛选出一个子集
</code></pre><p>这样一个通用的解决方案。</p>
<p>至此，这项解决方案可以脱离具体项目，提升为企业级通用类库的一部分，在多个项目间重用。</p>
<h2 id="Java-8-Lambda和Stream"><a href="#Java-8-Lambda和Stream" class="headerlink" title="Java 8, Lambda和Stream"></a>Java 8, Lambda和Stream</h2><p>事实上，由于<strong>从一个集合中根据某种条件筛选出一个子集</strong>是如此通用的一个功能，Java 8直接在JDK的层面上实现了，成为世界级通用方法。</p>
<p>JDK中通过流Stream（类似于集合Collection的概念），可以实现根据用户给出的筛选函数获取满足指定条件的元素的功能：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Apple redAndHeavy = <span class="keyword">new</span> Apple(Color.RED, <span class="number">100</span>, Area.ABROAD);</div><div class="line">    <span class="keyword">private</span> Apple redAndLight = <span class="keyword">new</span> Apple(Color.RED, <span class="number">30</span>, Area.GAN_SU);</div><div class="line">    <span class="keyword">private</span> Apple greenAndHeavy = <span class="keyword">new</span> Apple(Color.GREEN, <span class="number">80</span>, Area.SHAN_DONG);</div><div class="line">    <span class="keyword">private</span> Apple greenAndLight = <span class="keyword">new</span> Apple(Color.GREEN, <span class="number">40</span>, Area.GAN_SU);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Apple&gt; apples;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        apples = Arrays.asList(redAndHeavy, redAndLight, greenAndLight, greenAndHeavy);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectRedApple</span><span class="params">()</span> </span>&#123;</div><div class="line">        Set&lt;Apple&gt; selected = apples</div><div class="line">                .stream()</div><div class="line">                .filter(apple -&gt; apple.getColor() == Color.RED)</div><div class="line">                .collect(Collectors.toSet());</div><div class="line">        assertThat(selected, hasItems(redAndHeavy, redAndLight));</div><div class="line">        assertThat(selected, not(hasItems(greenAndHeavy, greenAndLight)));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectRedAndHeavyApple</span><span class="params">()</span> </span>&#123;</div><div class="line">        Set&lt;Apple&gt; selected = apples</div><div class="line">                .stream()</div><div class="line">                .filter(apple -&gt; apple.getColor() == Color.RED)</div><div class="line">                .filter(apple -&gt; apple.getWeight() &gt; <span class="number">50</span>)</div><div class="line">                .collect(Collectors.toSet());</div><div class="line">        assertThat(selected, hasItems(redAndHeavy));</div><div class="line">        assertThat(selected, not(hasItems(redAndLight, greenAndHeavy, greenAndLight)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体做法是：</p>
<ol>
<li>对原有集合调用stream()方法，转化成Stream；</li>
<li>对stream调用filter()方法，传入一个代表筛选条件的函数，得到一个由符合筛选条件的元素组成的新的stream；</li>
<li>对新stream调用collect()方法，将流中的元素收集到结果集合中。</li>
</ol>
<p>stream的filter()接收一个Predicate函数式接口的实现作为参数。Predicate含有一个抽象方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</div></pre></td></tr></table></figure>
<p>用于判断一个元素t是否满足条件。我们的lambda表达式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apple -&gt; apple.getColor() == Color.RED</div></pre></td></tr></table></figure>
<p>实际上是Predicate的test()方法的即时实现，作为stream的filter()方法的行为参数。-&gt;符号左边的部分apple是test()方法的参数，右边部分是test()的方法体。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以一句正确的废话作总结吧：</p>
<pre><code>磨练你的抽象能力，尽可能达成最泛化的设计。
</code></pre><p>范例项目可以从<a href="http://https://git.oschina.net/yyang/fp-and-bp.git" target="_blank" rel="external">范例项目地址</a>下载。</p>
]]></content>
    
    <summary type="html">
    
      本文以按颜色、大小、产地筛选一堆苹果这样一个情景为例，比较非参数化、数据参数化和通过函数式编程实现行为参数化，说明函数式编程的优势。
    
    </summary>
    
      <category term="分析设计" scheme="http://www.yyang.io/categories/OOAD/"/>
    
    
      <category term="函数式编程" scheme="http://www.yyang.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="行为参数化" scheme="http://www.yyang.io/tags/%E8%A1%8C%E4%B8%BA%E5%8F%82%E6%95%B0%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>结构比组成更重要</title>
    <link href="http://www.yyang.io/2016/01/01/Structure-is-more-important-than-composition/"/>
    <id>http://www.yyang.io/2016/01/01/Structure-is-more-important-than-composition/</id>
    <published>2016-01-01T06:29:21.000Z</published>
    <updated>2016-07-05T05:04:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>世间的万事万物，不管它们之间的差异有多大，分解到一定的层次，其组成都是相同的。</p>
<p>美女与野兽，在器官层面的组成基本相同（都是由五官、心、肺、肠胃、皮肤等组成，当然形状等方面有一些差异），在细胞层面差异更小，到分子层面差异已经微不足道，到原子层面已经完全相同。</p>
<p>金刚石与氢气，在分子和原子的层面仍有差别，而到了亚原子的层面，其组成已经完全相同，都是由质子、中子和电子组成。</p>
<p>技艺高超的黑客写的代码和实习生写的代码，遵循的开发范式、采用的编程语言等等，看起来有巨大的不同，但是分解到字节的层面则别无二致，位的层面则都是0和1。</p>
<p>具有相同组成的两种事物，由于结构不同，在形态和行为上可能表现出巨大的差异。</p>
<p>金刚石和石墨，都是由碳原子组成的，由于碳原子之间的结合方式即结构方面的不同，两者的硬度不啻天壤之别——石墨非常软，可以制成铅笔笔芯来使用；而金刚石是世界上最硬的物质，比钢铁都要坚硬的多。</p>
<p>植物和人类的遗传物质DNA，都是由相同的四种脱氧核糖核苷酸核苷酸（腺嘌呤、鸟嘌呤、胞嘧啶、胸腺嘧啶脱氧核糖核苷酸）组成的。差别只在于这四种脱氧核糖核苷酸核苷酸的排列顺序和数量。不同的核苷酸顺序决定了植物成为植物，人成为人；决定了奥巴马成为黑人，而布兰妮成为白人；决定了苏东坡的随缘自适，也决定了曹操的心狠手辣（这一点没有定论）。</p>
<p>孙武的女兵通过阵法战胜男兵，全明星足球队往往输给俱乐部队，在在说明一个真理：与组成相比，结构更重要。</p>
<p>计算机程序也一样。采用哪种语言，选用哪种类库和框架，其重要性是有限的。决定你的程序的质量（适用性、扩展性、灵活性、可维护性、性能等等）和生命力的根本因素是它的组织结构的方式。有没有分隔业务代码和技术代码？有没有分离意图和实现？有没有把可变部分隔离于主体代码之外？有没有通过逐层分解识别出可重用组件，有没有通过泛化识别出共同概念与模式？模块之内是否足够高内聚，模块之间是否足够低耦合？对这些问题的回答不同，会造成软件结构上的巨大差异，从而在软件质量上也形成巨大的差异。</p>
<p>软件架构师最主要的工作就是定义软件的结构（在多个维度上分解系统，定义组件间的依赖关系和通信方式等），而技术选型（即软件的组成方面）相对没那么重要。</p>
<p>想起以往面试架构师，问起他们以往的软件架构是怎样的，居然有不少人回答是SSH（Spring + Struts + Hibernate），这些人真是捉错用神了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;世间的万事万物，不管它们之间的差异有多大，分解到一定的层次，其组成都是相同的。&lt;/p&gt;
&lt;p&gt;美女与野兽，在器官层面的组成基本相同（都是由五官、心、肺、肠胃、皮肤等组成，当然形状等方面有一些差异），在细胞层面差异更小，到分子层面差异已经微不足道，到原子层面已经完全相同。&lt;/
    
    </summary>
    
      <category term="科学启示录" scheme="http://www.yyang.io/categories/%E7%A7%91%E5%AD%A6%E5%90%AF%E7%A4%BA%E5%BD%95/"/>
    
    
      <category term="科学启示录" scheme="http://www.yyang.io/tags/%E7%A7%91%E5%AD%A6%E5%90%AF%E7%A4%BA%E5%BD%95/"/>
    
      <category term="分析设计" scheme="http://www.yyang.io/tags/%E5%88%86%E6%9E%90%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>DDD与分层架构</title>
    <link href="http://www.yyang.io/2015/12/31/DDD-and-Layered-Architecture/"/>
    <id>http://www.yyang.io/2015/12/31/DDD-and-Layered-Architecture/</id>
    <published>2015-12-31T12:15:39.000Z</published>
    <updated>2016-07-05T05:04:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>DDD是一种设计思想，它本身不绑定到任何一种具体的架构风格，可以应用在多种不同的架构风格中。本文探讨在经典的分层架构中如何应用DDD，以及在DDD的语境下，分层结构每一层的具体职责。</p>
<p>分层架构是企业应用开发中采用率非常高的一种架构风格。它将软件系统的不同职责划分到不同的逻辑层中，并严格定义这些逻辑层的调用顺序。</p>
<p>在《领域驱动设计——软件核心复杂性的应对之道》一书中，DDD范式的创始人Evans提出下图所示的这样一种分层架构：</p>
<img src="/2015/12/31/DDD-and-Layered-Architecture/layered-architecture.png" alt="分层架构" title="分层架构">
<p>整个系统划分为基础设施层（Infrastructure）、领域层（Domain）、应用层（Application）和用户接口层（User Interface，也称为表示层）。下面从各个维度分别讨论之。</p>
<h2 id="职责分配"><a href="#职责分配" class="headerlink" title="职责分配"></a>职责分配</h2><p>四个逻辑层之间有着明确的职责划分。</p>
<h3 id="领域层（Domain-Layer）"><a href="#领域层（Domain-Layer）" class="headerlink" title="领域层（Domain Layer）"></a>领域层（Domain Layer）</h3><pre><code>领域层实现业务逻辑。
</code></pre><p>什么是业务逻辑？业务逻辑就是存在于问题域即业务领域中的实体、概念、规则和策略等，与具体的实现技术无关，主要包含下面的内容：</p>
<ul>
<li>业务实体（领域对象）。例如银行储蓄领域中的账户、信用卡等等业务实体。</li>
<li>业务规则。例如借记卡取款数额不得超过账户余额，信用卡支付不得超过授信金额，转账时转出账户余额减少的数量等于转入账户余额增加的数量，取款、存款和转账必须留下记录，等等。</li>
<li>业务策略。例如机票预订的超订策略（卖出的票的数量稍微超过航班座位的数量，以防有些旅客临时取消登机导致座位空置）等。</li>
<li>完整性约束。例如账户的账号不得为空，借记卡余额不得为负数等等。本质上，完整性约束是业务规则的一部分。</li>
<li>业务流程。例如，“在线订购”是一个业务流程，它包括“用户登录-选择商品-结算-下订单-付款-确认收货”这一系列流程。</li>
</ul>
<p>对领域层的进一步说明如下：</p>
<ul>
<li><strong>领域层映射到领域模型，是问题域的领域模型在软件中的反映。</strong></li>
<li>包含实体、值对象和领域服务等领域对象，通常这些领域对象和问题域中的概念实体一一对应，具有相同或相似的属性和行为。</li>
<li>在实体、值对象和领域服务等领域对象的方法中封装实现业务规则和保证完整性约束（这一点是与CRUD模式相比最明显的差别，CRUD中的领域对象没有行为）。</li>
<li>领域对象在实现业务逻辑上具备坚不可摧的完整性，意味着不管外界代码如何操作，都不可能创建不合法的领域对象（例如没有账户号码或余额为负数的借记卡对象），亦不可能打破任何业务规则（例如在多次转账之后，钱凭空丢失或凭空产生）。</li>
<li>领域对象的功能是高度内聚的，具有单一的职责，任何不涉及业务逻辑的复杂的组合操作都不在领域层而在应用层中实现。</li>
<li>领域层中的全部领域对象的总和在功能上是完备的，意味着系统的所有行为都可以由领域层中的领域对象组合实现。</li>
</ul>
<h3 id="应用层（Application-Layer）"><a href="#应用层（Application-Layer）" class="headerlink" title="应用层（Application Layer）"></a>应用层（Application Layer）</h3><pre><code>应用层定义系统的业务功能，并指挥领域层中的领域对象实现这些功能。
</code></pre><p>应用层是整个系统的功能外观，封装了领域层的复杂性并隐藏了其内部实现机制。</p>
<ul>
<li><strong>应用层映射到系统用例模型，是系统用例模型在软件中的反映。</strong></li>
<li>应用层接口描述了系统的全部功能，意味着系统用例模型中的所有用例都可以在应用层接口中找到对应的方法。</li>
<li>应用层实现类不实现业务逻辑，它通过排列组合领域层的领域对象来实现用例，它的职责可表示为“编排和转发”，即将它要实现的功能委托给一个或多个领域对象来实现，它本身只负责安排工作顺序和拼装操作结果。</li>
</ul>
<h3 id="基础设施层（Infrastructure-Layer）"><a href="#基础设施层（Infrastructure-Layer）" class="headerlink" title="基础设施层（Infrastructure Layer）"></a>基础设施层（Infrastructure Layer）</h3><pre><code>基础设施层为其余各层提供技术支持。
</code></pre><p>基础设施层是系统中的技术密集部分。它为领域层、应用层的业务服务（例如持久化、消息通信等等）提供具体的技术支持，用户接口层通常使用特定的表示层框架（例如SpringMVC、Struts或Tapestry）实现，但有需要时也可以申请技术设施层提供专门的技术支持。</p>
<p>一些例子：</p>
<ul>
<li>领域层需要持久化服务，在DDD中，领域层通过仓储（Repository）接口定义持久化需求，基础设施层通过采用JDBC、JPA、Hibernate、NoSQL等技术之一实现领域层的仓储接口，为领域层提供持久化服务。</li>
<li>领域层需要消息通知服务，在领域层中定义了一个NotificationService领域服务接口，基础设施层通过采用手机短信、电子邮件、Jabber等技术实现NotificationService领域服务接口，为领域层提供消息通知服务。</li>
<li>用户接口层需要一个对象序列化服务，将任何JavaBean序列化为JSON字符串，可以在用户接口层定义一个ObjectSerializer服务接口，基础设施层通过采用Gson实现这一接口，为用户接口层提供对象序列化服务。</li>
</ul>
<p>以上例子都是满足依赖倒置原则，通过控制反转的方式为高层模块提供低层服务，在实践中，可以通过Spring等IoC容器将基础设施层的实现类实例进行依赖注入。</p>
<p>基础设施层的典型实现形式是提供一个一个的类，这些类使用某些专有的技术实现其余各层（主要是领域层）定义的接口，例如提供一个领域层的仓储接口的实现类，使用Hibernate实现持久化，以及提供领域层的通知接口的实现类，使用ActiveMQ广播领域层中发生的事件，等等。</p>
<p>基础设施层也被称为数据源层或数据访问层。这些名称的一个缺点是给读者一个强烈的暗示：基础设施层只负责数据库访问。虽然数据库访问是基础设施层的职责之一，但基础设施层的负责范围比单纯数据库访问宽广的多，它实现了系统的全部技术性需求，例如上面例子中的通知服务和对象序列化服务，等等。</p>
<h3 id="用户接口层（User-Interface）"><a href="#用户接口层（User-Interface）" class="headerlink" title="用户接口层（User Interface）"></a>用户接口层（User Interface）</h3><pre><code>用户接口层为外部用户访问底层系统提供交互界面和数据表示。
</code></pre><p>用户接口层在底层系统之上封装了一层可访问外壳，为特定类型的外部用户（人或计算机程序）访问底层系统提供访问入口，并将底层系统的状态数据以该类型客户需要的形式呈现给它们。</p>
<p>用户接口层有两个任务：（1）从用户处接收命令操作，改变底层系统状态；（2）从用户处接收查询操作，将底层系统状态以合适的形式呈现给用户。</p>
<p>说明：</p>
<ul>
<li>典型的用户是人类用户，但是也可能是别的计算机系统。例如如果ERP系统要访问我们的系统获取信息，它也是一种用户。</li>
<li>不同类型的用户需要不同形式的用户接口，例如为人类用户提供Web界面和手机App，为ERP软件用户提供REST服务接口。</li>
<li>不同类型的用户需要不同形式的数据表示，包括表现形式的不同（XML、JSON、HTML）和内容的不同（例如手机App中呈现的数据内容往往比Web页面中呈现的少）。</li>
<li>用户接口层对应用层进行封装，用户接口层的操作与应用层上定义的操作通常是一一对应的关系。用户接口层从外部用户处接受输入，转换成应用层方法的参数形式，调用应用层方法将任务交由底层系统执行，并将返回结果转换成合适的形式返回给外部用户。</li>
<li>用户界面层的典型任务是下面三个：校验——校验外部客户输入的数据是否合法；转换——将外部客户的输入转换成对底层系统的方法调用参数，以及将底层系统的调用结果转换成外部客户需要的形式；转发——将外部客户的请求转发给底层系统。</li>
</ul>
<p>用户接口层也被称为用户界面层或表示层。</p>
<p>有时候，为了某些需要，我们可以从用户接口层中分离出一个亚层，可命名为门面层（Facade）。位于真正的用户接口层和应用层之间。</p>
<h3 id="门面层-Facade-Layer"><a href="#门面层-Facade-Layer" class="headerlink" title="门面层(Facade Layer)"></a>门面层(Facade Layer)</h3><pre><code>门面层隔离前台和后台系统，定义特定于用户接口层的数据结构，从后台获取数据内容并转化为用户接口层的数据形式。
</code></pre><p>从用户接口层中分离出专门的门面层，具有下面的优势：</p>
<ul>
<li>使得用户接口层能够独立于后台系统，与后台系统并行开发。</li>
</ul>
<p>用户接口层通过门面层接口与应用层和领域层解耦，意味着用户接口层可以独立开发，不必等待后台系统的完成，亦不受后台系统重构的影响，在需求调研阶段系统原型出来并得到用户确认之后，就可以开始用户接口层的开发了。可以根据界面原型定义用户接口层需要的数据结构，该数据结构与底层数据结构解耦，不需要知道底层数据类型和数据之间的关联关系。将底层数据和界面数据连接起来并相互转换是门面层实现类的职责，这方面工作可以等待前后台系统分别完成之后进行。</p>
<ul>
<li>使得分布式部署成为可能。</li>
</ul>
<p>如果没有门面层的隔离，用户接口层只能直接使用领域层的领域对象作为自己的数据展现结构。这样我们就不能将系统进行分布式部署，将用户接口层和后台系统（领域层、应用层等）分别部署到不同的服务器上。因为在JPA和Hibernate等技术实现中，领域实体绑定到当前服务器的持久化上下文中，必须脱管之后才能够跨越JVM进行传输。更大的问题是事务问题，事务要跨越服务器的边界，复杂性增加，性能严重下降。门面层的存在使得实体和事务都限制在后台系统，不需要扩展到前台服务器。</p>
<ul>
<li>避免Hibernate中“会话已关闭”的问题，消除成本巨大的“Open Session in View”模式的需要。</li>
</ul>
<p>在采用JPA或Hibernate作为持久化手段的系统中存在臭名昭著的“会话已关闭”问题，对付这一问题的主要手段是Open Session in View这一存在潜在性能问题的方案。如果不采用门面层隔离后台数据结构，在前端展现数据需要访问实体的延迟初始化属性时就会遇到“会话已关闭”问题，而采用Open Session in View模式处理这个问题就意味着事务不是在后端完成而是扩展到前端用户接口层，在大访问量的网站上会遭遇严重的性能问题并降低吞吐量。采用门面模式的话，有关联关系的数据在后台拼装完毕再一次性返回给前端，事务局限在后端范围，不再有“会话已关闭”和性能问题。</p>
<p>门面层说明：</p>
<ul>
<li>门面层特定于用户接口层，由用户接口层定义和控制（包括操作和数据的形式和内容），这意味着需要为不同类型的用户接口层开发专门的门面层。</li>
<li>查询结果通常以数据传输对象（DTO）的形式表示。DTO的结构由用户接口层而不是后端决定，代表前端需要的数据形式，与底层数据结构脱耦。一个DTO对象往往由来自领域层中多个相关实体类的数据聚合而成。</li>
<li>通过门面层实现类访问后端的应用层。实现类将后端数据拼装为DTO并返回给前端，它可以将数据装配职责委托给专门的Assembler工具类去执行。</li>
<li>在分布式系统中，可以在前端和后端分别部署门面层。前后端的门面层接口相同，但后端的门面层实现类负责数据装配和发布，前端的门面层实现类负责通过某种通信机制（Web Service等）与后端门面层通讯，获取后者装配好的数据。传输过程中DTO可能序列化为JSON或XML等形式。</li>
</ul>
<h3 id="综合说明"><a href="#综合说明" class="headerlink" title="综合说明"></a>综合说明</h3><ul>
<li>在四层架构中，领域层和应用层纯粹表达业务意图和机制，不包含任何技术逻辑；而基础设施层和用户接口层纯粹提供技术实现，不包含任何业务逻辑。在业务和技术之间存在清晰的关注点分离。</li>
<li>应用层定义系统的全部业务功能，领域层具体实现这些功能。领域层“动于内”，应用层“形诸外”。</li>
<li>应用层和领域层合在一起代表了整个业务系统，具备概念上的完整性（包含了全部领域概念，实现了全部的业务行为），但不具备实现上的完整性（没有基础设施层的技术支持，系统不具备可运行性；没有用户接口层支持，系统不具备可访问性）。</li>
<li>所有业务逻辑都在领域层实现，业务逻辑泄漏到应用层是一个错误，泄露到基础设施层或用户接口层是严重错误（在用户接口层中实现业务逻辑是采用CRUD模式的常犯的典型错误）。</li>
<li>领域层在履行职责的过程中如果需要技术支持，则在领域层中定义一个表达业务意图的领域服务接口，交由基础设施层采用各种具体技术去实现这一接口。保证领域层（和应用层）不被各种具体技术污染是逻辑分层的第一要务。</li>
<li>判断业务层（领域层和应用层）是否被具体技术污染一个方便的方式是检查它们是否有对具体技术框架（例如Spring和Hibernate）的编译时依赖。业务层代码应该只依赖于JDK（java.*）、Java规范（javax.*），以及一些被广泛使用的类库如commons-lang、Guava、SLF4J、JodaTime等，这些类库本质上可视为对JDK的补充，不是一种具体技术框架。</li>
<li>应用层和门面层的区别：应用层属于后端，门面层属于前端。应用层方法的参数和返回值可以包含领域对象，门面层方法的参数通常是字符串和数字等简单值，返回值是简单值或DTO。以转账操作为例子，应用层中的方法签名是这样的：void transferFund(Account from, Account to, Money amount, Date transferTime)，门面层中的方法签名是这样的：void transferFund(String fromAccountNumber, String toAccountNumber, BigDecimal amount, String currency, Date transferTime)。在门面层的实现类中，负责根据账户号码从仓储中获取Account对象，将amount和currency拼装成Money对象，然后以这些对象和transferTime为参数访问应用层中的相应方法。</li>
<li>领域层中的领域对象具有领域通用性或行业通用性，意味着可以在基本相同的领域层上建立不同的应用层（就像三极管、二极管、电容、电阻等在电子工业领域具有通用性，可以用来组装收音机、录音机、电视机等不同应用），应用层是应用特定或客户特定的，只为特定的应用或客户定制。相比应用层，领域层对象具备高度的可重用性。例如一套完备的用户管理领域层模块可以被OA、ERP、CRM、HRM、MES等多个应用重用。因为领域对象中封装了业务逻辑，这种重用是非常有价值的。</li>
<li>可以基于相同的应用层建立不同的用户接口层，例如Web页面，手机App、BI报表、RESTful Web Service等等。</li>
</ul>
<h2 id="各层间的调用关系与依赖关系"><a href="#各层间的调用关系与依赖关系" class="headerlink" title="各层间的调用关系与依赖关系"></a>各层间的调用关系与依赖关系</h2><p>各层在运行时<strong>对象</strong>调用关系如下图所示：</p>
<img src="/2015/12/31/DDD-and-Layered-Architecture/layered-call.jpg" alt="各逻辑层的运行时对象调用关系" title="各逻辑层的运行时对象调用关系">
<p>各层在编译时的<strong>类</strong>依赖关系如下图所示：</p>
<img src="/2015/12/31/DDD-and-Layered-Architecture/layered-dependency.jpg" alt="各逻辑层的编译时类依赖关系" title="各逻辑层的编译时类依赖关系">
<p>图中infrastructure是基础设施层，domain是领域层，application是应用层，facade和facade-impl是门面层（前者是门面接口层，后者是门面实现层），webapp是用户接口层（采用web形式）。</p>
<p>这里有几个关键点：</p>
<ul>
<li>基础设施层和其他各层的编译时依赖关系和运行时调用关系是相反的：在运行时，其他各层中的对象调用基础设施层中的对象实例，使用后者提供的服务；而在编译时，基础设施层中的类依赖于其他各层（主要是领域层）中的类。这是通过运用面向对象原则中的依赖倒置原则达到的，在领域层中定义服务接口，而在基础设施层中实现领域层定义的接口。在运行时，通过Spring等IoC容器向领域层中服务接口的客户类注入基础设施层中定义的实现类的实例。依赖倒置原则保证了领域层是主，基础设施层是仆。正如同建筑工程建设中的甲方和乙方，虽然甲方使用乙方提供的产品和服务，但乙方要完成的内容是由甲方指定和控制的，是乙方依赖于甲方，而不是甲方依赖于乙方。</li>
<li>代表业务的层（领域层和应用层）不依赖于代表技术的层（基础设施层和用户接口层），代表技术的层依赖于代表业务的层。这是天经地义的——业务提出需求，技术实现业务提出的需求。在保持业务层不变的前提下，可以变更技术层，实现可替换性——例如原来的基础设施层采用MyBatis实现持久化，可以自由替换为用JPA实现持久化；又例如原来的用户接口层基于Swing，可以自由替换为Web界面——在两种情况下，都不需要修改业务层。</li>
<li>领域层处于整个系统的核心位置，它在概念上不依赖于其他各层，其他各层都直接或间接依赖于它。领域层是整个系统的核心引擎，直接实现业务目标，攸关业务正确性、可靠性、灵活性和扩展性。应该把最优秀的人才和最大部分的精力放在领域建模和领域层开发上，这才是真正的“领域驱动设计”。</li>
<li>领域层应该是整个系统中最“胖”的一层，因为它实现了全部业务逻辑并且通过各种校验手段保证业务正确性，其余各层相对都较“瘦”。如果你的代码中不是如此，你肯定走错了路。胖用户接口层是“以数据库为中心的增删改查”模式的典型症状，胖应用层是事务脚本模式的典型症状。</li>
<li>通过定义门面接口（图中的facade），前端和后端概念上互相独立，互不依赖，可以并行开发实现。等到前后端系统都开发完毕，再开发门面实现（图中的facade-impl），将前端和后端系统粘合起来，成为一体。门面层接口的任务是“分”：将前台和后台在概念上分隔开来；门面层实现类的任务是“合”，将前台和后台粘合在一起，成为一个有机统一的完整系统。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DDD是一种设计思想，它本身不绑定到任何一种具体的架构风格，可以应用在多种不同的架构风格中。本文探讨在经典的分层架构中如何应用DDD，以及在DDD的语境下，分层结构每一层的具体职责。&lt;/p&gt;
&lt;p&gt;分层架构是企业应用开发中采用率非常高的一种架构风格。它将软件系统的不同职责划
    
    </summary>
    
      <category term="分析设计" scheme="http://www.yyang.io/categories/OOAD/"/>
    
    
      <category term="DDD" scheme="http://www.yyang.io/tags/DDD/"/>
    
      <category term="架构" scheme="http://www.yyang.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="OOAD" scheme="http://www.yyang.io/tags/OOAD/"/>
    
  </entry>
  
  <entry>
    <title>软件开发大图景：两个维度，四个象限</title>
    <link href="http://www.yyang.io/2015/12/31/Big-Picture-of-Software-Development/"/>
    <id>http://www.yyang.io/2015/12/31/Big-Picture-of-Software-Development/</id>
    <published>2015-12-31T07:47:19.000Z</published>
    <updated>2016-07-05T05:04:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>软件开发，尤其是大型软件开发是非常复杂的，涉及非常多的组件元素，需要作出大大小小的各种决策。软件开发的根本矛盾是不断增长的系统规模和复杂性与开发人员有限的大脑容量和处理速度之间的矛盾。:)</p>
<p>为了了解软件开发的全貌，让我们上升到3万米的高空，对软件开发内容做一个全景式的鸟瞰，对我们要了解和实现的东西进行一个高层的切分。</p>
<h2 id="两个维度"><a href="#两个维度" class="headerlink" title="两个维度"></a>两个维度</h2><h3 id="范围维度"><a href="#范围维度" class="headerlink" title="范围维度"></a>范围维度</h3><p>软件开发的主要目的是为其他行业的业务问题提供技术解决方案，例如为航空公司的飞机实现自动导航，为汽车公司的汽车生产进行产销平衡，等等。从范围上看，软件开发所覆盖的范围可以划分为两个领域：我们要开发的软件系统属于解决方案域，而软件系统来自于和最终服务于的业务领域（例如飞机导航、汽车生产等等）属于问题域。问题域存在问题，软件系统为问题域的问题提供技术上的解决方案。</p>
<p>这就是我们看待软件开发的第一个维度：范围维度。我们把软件开发的范围划分为问题域和解决方案域。处于问题域中的时候，我们的任务是认识世界，即了解在没有软件系统存在的情况下，现实业务领域是如何运作的；而处于解决方案域中的时候，我们是在改造世界，即通过设计和实现软件系统帮助业务领域运作得更好（更大、更快、更赚钱、更省钱、更透明、更灵活……）。</p>
<p>在软件开发的术语中，“业务”、“领域”是问题域的同义词，“系统”是解决方案域的同义词（“系统”是“软件系统”的简称）。因此，“业务”分析师、”业务”规则、“业务”用例模型、“领域”模型、“领域”专家聚焦于问题域，而“系统”分析师、“系统”用例模型聚焦于解决方案域。</p>
<h3 id="内-外维度"><a href="#内-外维度" class="headerlink" title="内/外维度"></a>内/外维度</h3><p>除了范围维度之外，我们还可以从另外的维度看待软件开发，其中一个非常有用的维度是内/外维度。从内/外视角看，系统在我们面前可以划分为外部视图和内部视图。外部视图是系统的黑盒视图，我们看不到它的内部组成和运作机制，只能够看到它呈现给外界的功能；而内部视图是系统的白盒视图，揭示了系统的内部组成和运作机制。</p>
<h2 id="四个象限"><a href="#四个象限" class="headerlink" title="四个象限"></a>四个象限</h2><p>范围维度和内外维度两者是正交的，你可以把它们看成两条相互垂直相交的数轴——X轴和Y轴，它们把软件开发问题空间分割为四个区域——用数学的术语表示就是四个象限。</p>
<img src="/2015/12/31/Big-Picture-of-Software-Development/Big-Picture.png" alt="软件开发大图景" title="软件开发大图景">
<p>分别说明如下：</p>
<h3 id="问题域的外部视图——业务用例模型"><a href="#问题域的外部视图——业务用例模型" class="headerlink" title="问题域的外部视图——业务用例模型"></a>问题域的外部视图——业务用例模型</h3><p>这个象限从外部视角看待问题域，分析探究业务系统实现了哪些功能，对它的用户提供了哪些业务价值？每一项系统功能体现为一个业务用例。例如银行储蓄业务为储户提供存款、取款、转账和提供对账单等等服务，每一项服务就是一个业务用例。</p>
<p>开发业务用例模型不是软件开发的必须步骤，但本人强烈建议不要忽略这一方面的工作。一方面，开发软件系统的目标就是实现和改进这些业务用例（或业务用例中的某些环节），业务用例为软件开发设定了目标和验收标准；另一方面，通过业务用例分析可以更有效地支持领域建模和系统用例建模，有助于发现领域对象和机制，防止系统用例遗漏或疏失。</p>
<h3 id="问题域的内部视图——领域模型"><a href="#问题域的内部视图——领域模型" class="headerlink" title="问题域的内部视图——领域模型"></a>问题域的内部视图——领域模型</h3><p>这个象限从内部视角看待问题域，研究业务领域中固有的组成、结构、行为、机制和规则等等。这方面的工作称为“领域建模”，其产物称为“领域模型”。我们要重点分析研究的是：业务领域中有哪些关键的概念实体（例如银行储蓄业务中的账户、对账单、信用卡、借记卡等等）、各种概念实体之间的关系（关联、泛化、组合、聚合等等），以及它们之间如何交互以实现业务用例模型中规定的各项功能等等。</p>
<p>领域建模是软件开发中最核心的活动，领域模型是软件开发中最有价值的工件。领域建模的质量在很大程度上决定了软件的成败。如果由于对问题域分析理解的偏差，产出错误的领域模型，那么，无论多么先进的技术工具、多么高超的技术手段，都无法挽救软件的失败命运。</p>
<h3 id="解决方案域的外部视图——系统用例模型"><a href="#解决方案域的外部视图——系统用例模型" class="headerlink" title="解决方案域的外部视图——系统用例模型"></a>解决方案域的外部视图——系统用例模型</h3><p>这个象限从外部视角看待要构建的软件系统，定义了系统所要实现的所有业务功能，即软件系统能够向它的用户提供的业务价值。这方面的工作称为需求分析（通常只包含功能需求），其产物称为“系统用例模型”，简称为“用例模型”（另一个名字是“功能规格说明书”），每一个系统用例描述一项对用户有价值的系统功能。</p>
<p>系统用例模型定义了软件系统的功能外观，即软件系统能够“干什么”的方面。系统用例模型沟通了两个领域，它定义了要开发的软件系统（解决方案域）必须实现的业务功能（问题域）。</p>
<h3 id="解决方案域的内部视图——设计模型"><a href="#解决方案域的内部视图——设计模型" class="headerlink" title="解决方案域的内部视图——设计模型"></a>解决方案域的内部视图——设计模型</h3><p>这个象限从内部视角看待要构建的软件系统，即通过哪些技术组件和怎样的交互手段实现系统用例模型中定义的业务功能？</p>
<p>领域模型中的对象代表问题域中的概念（如信用卡、账户等等），而设计模型中的对象代表软件实体（如记录集、DAO等等）。正如同业务用例模型会映射到系统用例模型一样（通常一个系统用例实现一个业务用例，或者业务用例中的一个步骤），领域模型中的对象也可以而且应该映射到设计模型中的相应软件对象之上，这意味着设计模型中也应该有信用卡、账户这样的对象，它们和领域模型中的同名对象一样，拥有相同或类似的属性和行为，这就是《领域驱动设计》一书的主张——使用同一种语言（业务语言）和基于同一个模型（领域模型）进行分析和设计，开发软件应用。</p>
<h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p>解决方案域以问题域为出发点和依归，即问题决定解决方案（这是理所当然的，不是吗？如果我想求解3乘2这个问题，你却提供3加2这个解决方案，当然是错误的）。开发人员的一个典型的错误是把关注点集中在解决方案域的实现技术上，却忽视了问题分析和问题定义，因此在实现过程中失焦，刻鹄成鹜，画虎类犬。</p>
<p>内部视图“动于内”，外部视图“形诸外”。系统的外部视图定义了外部可见的行为，而内部视图揭示了系统内部的组织结构和运行机制，系统通过内部视图中的结构和机制实现外部视图中向外界呈现的行为。外部视图表达What，即“做什么”，内部视图表达How，即“怎么做”。</p>
<p>设计模型从两方面获得指导：从系统用例模型中获得“What”方面的指导，确定需要实现哪些功能；以及从领域模型中获得“How”方面的指导，确定如何实现那些功能。在分层架构中，用例模型和领域模型分别映射到系统的应用层和领域层；在Clean架构（Robert C. Martin，<a href="http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="external">Clean架构</a>）中，用例模型和领域模型分别映射到系统的用例层和实体层。</p>
<h2 id="时刻记住你当前所处的位置"><a href="#时刻记住你当前所处的位置" class="headerlink" title="时刻记住你当前所处的位置"></a>时刻记住你当前所处的位置</h2><p>在软件开发过程中，请时刻记住你当前处于哪一个象限。我们应该严格划分业务（问题域）和技术（解决方案域），意图（外部视角）和实现（内部视角），要防止业务逻辑渗漏到技术组件中（例如在表示层或持久层中维护取款业务规则），也要防止技术逻辑渗漏到业务逻辑中（例如领域层代码依赖Spring或Hibernate，或使用RabbitMQ进行消息通信），还要防止在只应该表示意图的地方直接提供实现方案（例如在应用层中实现业务逻辑）。</p>
<p>当处于问题域中的时候，我们的任务是“发现”，是“认识世界”；当处于解决方案域的时候，我们的任务是“发明”，是“改造世界”。当处于外部视图中的时候，我们是在描述系统的行为和功能；当处于内部视图中的时候，我们是在描述系统的内部组成、结构和实现机制。具体来说：</p>
<ul>
<li>在业务用例模型中，我们识别和建模业务意图和业务行为；</li>
<li>在领域模型中，我们识别和建模业务实体和业务实现机制；</li>
<li>在系统用例模型中，我们定义待开发的软件系统要实现的行为和功能；</li>
<li>在设计模型中，我们定义待开发的软件系统的内部结构和行为实现机制。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;软件开发，尤其是大型软件开发是非常复杂的，涉及非常多的组件元素，需要作出大大小小的各种决策。软件开发的根本矛盾是不断增长的系统规模和复杂性与开发人员有限的大脑容量和处理速度之间的矛盾。:)&lt;/p&gt;
&lt;p&gt;为了了解软件开发的全貌，让我们上升到3万米的高空，对软件开发内容做一个
    
    </summary>
    
      <category term="分析设计" scheme="http://www.yyang.io/categories/OOAD/"/>
    
    
  </entry>
  
</feed>
